[
  {
    "title": "Accordion",
    "description": "An accordion is a type of flexible container that allows the user to control the display of content by manually expanding and collapsing the container.",
    "kicker": "",
    "content": "Anatomy 1. Header (text label) 2. Panel (text or mixed content) 3. Icon (state indicator e.g., Expanded, Collapsed) 4. Divider 5. Background color (set manually, default is \"none\") --- Options Density: Default By default, accordion items are styled with a padding value that is appropriate for most use-cases. Density: Compact \"Compact\" density applies a minimal amout of padding to the accordion item, producing a slimmer footprint that takes up less visual space. Density: Loose \"Loose\" density applies a generous amount of padding to the accordion item, producing a larger footprint that occupies more visual space. --- Behavior Collapsed Each accordion item consists of two main parts - the header, or item title and the panel, or item content. In the collapsed state, only the header is visible. When collapsed, the chevron icon also points down to provide a visual signal for revealing additional information. By default, all items in the accordion are displayed in the collapsed state unless otherwise specified. Expanded Users can access additional information by clicking or tapping the accordion item to reveal the expanded state. In the expanded state, the panel is displayed directly below the header. The chevron icon points up to indicate the current state and to provide a visual signal for returning the accordion item to its collapsed state. Focus / Keyboard interaction The accordion component is accessible via keyboard interaction. The \"tab\" key can be used to navigate items from top to bottom. The item currently in focus is denoted by a blue outline, using the CSS outline property. Pressing the \"enter\" (\"return\") key will expand or collapse the item in focus. Disabled The purpose of the accordion is to act as a container and visual interface for displaying static information upon user interaction. It is not intended to be used as an input element or form field. The accordion component does not require conditional logic to achieve its functionality and therefore does not feautre a special disabled state or possess any manner of error-handling. If visual feedback for a disabled state is desired, consider using the [.not-allowed] CSS property. --- Guidance Font family overrides By default, the accordion component uses \"Franklin Light\" as its primary font for both the header and panel - however, font family overrides are premitted depending on the use-case. Below, the header has been set in \"Postoni\". Font size overrides The accordion component uses \"size100\" as its default font size. If a larger font size is desired, be mindful in choosing a size that is suitable for the use-case and appropriate for the space available. Avoid using font sizes that are excessively small or large, which may negatively affect your layout. Don't split or truncate content The header of the accordion should be a complete sentence or statement. It should not start in the header and continue in the panel. --- API Reference",
    "url": "/components/accordion",
    "path": "components/accordion.mdx"
  },
  {
    "title": "Action Menu",
    "description": "A temporary overlay containing a list of items (commands or actions) relevant to the user’s current context. An item in the menu is immediately executed upon selection. Action menus must be paired with a trigger (button or text link) that reveals the menu on click or tap.",
    "kicker": "",
    "content": "--- Anatomy 1. Trigger 2. Item label 3. Submenu indicator 4. Group label 5. Group divider 6. Item icon (optional) 7. Selected item 8. Unselected item --- Options Density The following options can be applied to specify the density of the items: default, loose, and compact. Trigger The Action List can be triggered with a button, a link, an icon, or similar visual cue. --- Behavior Disabled A menu item can be set to ‘disabled’, according to the user’s current context and relevance of option(s). Hover Items display background color ‘$faint’ on mouse over Select Action menu items can be made selectable using radio (I.E. only one option permitted) or multi-select functionality. Menu items are selected or deselected via user input. Selected items are visually indicated in bold along with the ([glyph: check]) icon. Submenu The submenu indicator, ([glyph: chevron-right]) is used to identify items containing a submenu. Action menu supports up to three layers of submenu — level 1 (i.e., root), level 2 and level 3. To access a submenu, hover over the menu item or use keyboard navigation. Each menu level has a specific elevation in the stacking order, corresponding to its place in the nesting hierarchy. Additionally, menu containers for levels 1, 2 and 3 possess individual shadow depths, corresponding to shadow tokens ‘$300, ‘$400’, and ‘$500’, respectively. --- Guidance Number of menu items It’s recommended to limit the number of items to no more than five (5) options in a given menu list. Reducing the number of options avoids overwhelming the user and aides in making an accurate selection. If your action menu requires more options, consider using group labels to provide additional visual clarity. Order of menu items In general, it’s best to place the most frequently used or encouraged options towards the top of the menu list, for easier scannability. Accessibility Keyboard controls --- API Reference",
    "url": "/components/action-menu",
    "path": "components/action-menu.mdx"
  },
  {
    "title": "Alert Banner",
    "description": "Alert banners notify the user of important messages, such as system alerts. They're meant to encourage the user to take an action.",
    "kicker": "",
    "content": "--- Anatomy 1. Icon - Semantic only 2. Text 3. App bar 4. Button icon --- Options Variants There are four variants warning, information, success, and error. Shadow Enable shadow by passing shadow property. Dismissable To allow the Alert Banner to be dismissed pass the dismissable property and add . --- Behavior Text overflow When the text overflows it will wrap and resize the AlertBanner. --- Guidance When to use shadows Apply the property shadow when overlaying content. Semantic messaging only The alert banner is strictly for semantic messaging around system status. This means the use of including marketing or other messaging diminishes the effectiveness of semantic messaging. --- API Reference",
    "url": "/components/alert-banner",
    "path": "components/alert-banner.mdx"
  },
  {
    "title": "App bar",
    "description": "The App Bar displays information and actions relating to the current screen.",
    "kicker": "",
    "content": "Anatomy The anatomy of an app bar has no visual elements but rather is an empty container that has a built-in utility to make positioning on a layout easier. --- Options Position The following position are available sticky relative absolute fixed. The behavior of the different options are described in the MDN web docs. --- API Reference",
    "url": "/components/app-bar",
    "path": "components/app-bar.mdx"
  },
  {
    "title": "Avatar",
    "description": "Avatar is a round container that holds a profile image to be used.",
    "kicker": "",
    "content": "--- Anatomy 1. Image container --- Options Size Avatar supports any size token. The default size token is 200. --- Guidance Supports only 1:1 image ratios Images set to the height and clipped in a round container. When images are not in a 1:1 aspect they will be distorted. Recommended spacing When inline, Avatars should maintain at least the recommended spacing --- Accessibility Avatars should always include alt text of the image. --- API Reference",
    "url": "/components/avatar",
    "path": "components/avatar.mdx"
  },
  {
    "title": "Box",
    "description": "This component is used to create a box element with a set of default styles. It's best used in protoyping and playing with components. For production code, we recommend using \"styled\" or \"css\" functions intead.",
    "kicker": "",
    "content": "Options as The as prop allows you to change the underlying HTML element that is rendered. This is useful for when you want to use a component that is not a div by default. Do not use this as to replace our Button component. Use the Button component for buttons. css The css props allows you to pass in a style object that will be applied to the underlying HTML element. --- Guidance Protoyping This component is used to create a box element with a set of default styles. It's best used in protoyping and playing with components. For production code, we recommend using \"styled\" or \"css\" functions intead. Prototyping is a great way to get started with a new project. It's a great way to get a feel for the components you'll need and how they'll work together. It's also a great way to get a feel for the design system you'll be using. Production For production code, we recommend using \"styled\" or \"css\" functions intead. Production code is code that is ready to be shipped to production. It's code that we can be confident will work as expected like having built in best practices like accessibility and performance. --- Accessibility This component is not accessible by default. You should always use the as prop to change the underlying HTML element to something more semantic. --- API Reference",
    "url": "/components/box",
    "path": "components/box.mdx"
  },
  {
    "title": "Button",
    "description": "",
    "kicker": "",
    "content": "Anatomy 1. Icon 2. Background Fill 3. Text --- Types Text buttons Text buttons are buttons that use text paired with or without an icon. Icon buttons An icon button is a button that uses only an icon. --- Options Variant There are 3 variants available primary secondary & cta. isOutline Adding the property isOutline will set the button appearance as an outline. Density There are two options for the property density compact and default. --- Behavior Disabled --- Guidance Avoid small width buttons Buttons do not have a minimum width but should still avoid being smaller than 120px. Mixing button densities Buttons within the same layout should have the same density. Button without borders Buttons can have no borders, but will need to be manually applied. --- Accessiblity Pair icons with text When possible use text button with an icon. The pairing of text acts as a label to help contextualize the action being taken when clicked/tapped. --- API Reference",
    "url": "/components/button",
    "path": "components/button.mdx"
  },
  {
    "title": "Card",
    "description": "Single, contained unit designed to hold other related elements and/or components.",
    "kicker": "",
    "content": "Anatomy 1. Border 2. Content --- Options Although a card defaults to the size of container it resides in, the dimensions and layout of a card depend entirely on its contents. Use the css property to designate styling for your specific needs. --- Guidance Group content Cards are a greate way to group related content together. An empty box with infinite possibilities Cards can hold virtually any combination of elements/components. Mix and match to create a contained experience. Test how it scales Cards can hold so many elements/components, but with that freedom comes the responsibility of testing the responsiveness of the card. --- Accessibility Use list Use unordered lists and list items for cards in a collection. This allows screen readers to parse the items as a list. The order of elements inside a card should be logical, and each interactive element should have an apparent hover state. --- API Reference",
    "url": "/components/card",
    "path": "components/card.mdx"
  },
  {
    "title": "Carousel",
    "description": "A carousel is a type of UI pattern that displays several content items in a linear sequence. Carousels can accommodate various kinds of content including text, images, and media. A carousel often includes visual navigation (such as buttons, arrows, or chevrons) to indicate the component is interactive and can be controlled directly by the user. The minimum number of items in a carousel is 4. Carousels are designed to contain a greater number of items than the width available -- items in the sequence that fall outside of the carousel container are hidden from view. Users can control which items are visible by clicking the \"previous\"/\"next\" buttons to navigate from left to right, or  by manually swiping through the carousel.",
    "kicker": "",
    "content": "Anatomy 1. Title 1. Controls 1. Content items 1. Pagination Dots (index) --- Options Paging The carousel component uses \"pages\" to display nested content in a linear sequence. A continuous group of visible items constitutes a page. By default, the starting page is \"1\". The carousel can be configured to start on a page other than \"1\". Items per page The carousel can be configured to page automatically (vased on the available width), or by a set number of items. --- Guidance Controls: Top (default) Carousel controls are placed in the far right top corner of the component by default. This is the preferred option for most use-cases as it offers a predictable layout for users familiar with the carousel UI pattern. Controls: Bottom Controls can also be placed below content items, in the far right bottom corner. Controls: Center Controls can be positioned to overlap the content items, fixed to the far left and far right of the carousel container. This layout is suitable for use-cases in which it is preferable to maintain white space above and below the content area. Controls on mobile devices On mobile devices, controls are hidden by default to permit navigation by swipe only. This behavior is optimal for compact layouts such as smartphones where screen real-estate is limited. (You may view any of the live demo examples on this page on your mobile device to see this behavior in action). Custom controls The carousel can accept custom \"previous\"/\"next\" buttons. However, be mindful of visual contrast and accessibility contraints when evaluating design and technical implementation. Slideshow The carousel component can be configured as a slideshow. The slideshow option displays one content item at a time and features automatic paging that can be toggled using the \"play\" / \"pause\" button. --- Accessibility Handling of current item To optimize the carousel for interoperability with assistive technologies (e.g. screen -readers), make sure to refer to WAI-ARIA. Use WAI-ARIA live-region to inform the screen-reader which item is being scrolled into view when using the previous and next buttons - this enables the content of the item to be announced by the screen-reader. Add aria-labelledby to Carousel Items to allow the screen-reader to read the content items label when moving between them using the arrow keys Focus Set keyboard focus on the currently displayed item, upon user interaction with the item. If carousel is set to page automatically, pause the animation when carousel receives keyboard focus. Pause the animation when cursor enters hover area of carousel. Animation / Motion The carousel honors user preference for reduced motion by disabling animation. --- API Reference",
    "url": "/components/carousel",
    "path": "components/carousel.mdx"
  },
  {
    "title": "Checkbox",
    "description": "",
    "kicker": "",
    "content": "Anatomy 1. Icon 2. Background Fill 3. Border --- Options Size There are two sizes available 125 & 087. Variant There are 3 variants available primary secondary & cta. Style There are 2 styles available fill & outline. Check states A checkbox state can be true, false or indeterminate. --- Behavior Disabled Focus Required --- Guidance When to use indeterminate state When checkbox are in a group the parent checkbox will reflect the group status of the checkbox. Click/Tap targets The click/tap target should include the label and control the checkbox. Custom labels You may want different styles applied to your labels. --- API Reference",
    "url": "/components/checkbox",
    "path": "components/checkbox.mdx"
  },
  {
    "title": "Coach Marks",
    "description": "TBD",
    "kicker": "",
    "content": "",
    "url": "/components/coach-marks",
    "path": "components/coach-marks.mdx"
  },
  {
    "title": "Container",
    "description": "The container centers your content horizontally. It's the most basic layout element.",
    "kicker": "",
    "content": "Anatomy The anatomy of a container has no visual elements. It is an empty container used for layout and is tied to our breakpoints. --- Options Max width Determine the max width of the container. The container width grows with the size of the screen. Set the container width to fluid for a full width container. --- API Reference",
    "url": "/components/container",
    "path": "components/container.mdx"
  },
  {
    "title": "Dialog",
    "description": "A dialog is an overlay used to display important content or request input from the user. It is layered on top of the primary screen and typically requires the user to take action before continuing.",
    "kicker": "",
    "content": "Note: Dialogs are designed to be attention-grabbing and prominent to ensure that the user sees and interacts with them, therefore, they should only be used to display critical information. For less critical information and tasks, consider using our drawer component or popover component for actionable UI and our tooltip component for non-actionable UI. --- Anatomy div > div\": { paddingBlock: 0 } }}> 1. Container 2. Close button icon (optional) 3. Scrim 4. Footer (optional) --- Options Width Dialog width can be defined. The default width of the dialog is 500px. Height Dialog height can be defined. The default height of the dialog is 300px. Optional footer The footer is optional when using the dialog. It provides recommended positioning and padding for buttons and links on a dialog for both inline (side-by-side) elements and stacked (vertical) elements. Optional close The dialog close button can be optional. By default, the close button renders in the top right of the dialog content. The button's asChild property can be used to give any child button the ability to close the dialog. Custom scrim color The scrim color can be changed by defining the color using one of our tokens. Custom container color The container color can be changed by defining the color using one our tokens. --- Behavior Closing When the close button is rendered, the dialog can be closed by clicking the scrim, the close button, or the cancel button if one is present. Note: If the user is required to take action in order to dismiss the dialog, the dialog can be set to open and will remain open even if the scrim is clicked on. The user must then interact with the content in the dialog to close it. On hover, a circular background color appears behind the close icon. Content overflow Content will overflow, both vertically and horizontally, in the dialog by default. Users can scroll within a dialog. See our guidance on complex and interactive content in dialogs. Note: If a dialog has vertical overflow, the content in the scrollable area should flow behind the footer. In other words, the footer should be sticky so that the user can always see the action buttons available to them. --- Guidance Content should be accessible Make sure color contrasts comply with WCAG accessible contrast requirements. Buttons and links should be placed at the bottom of the container Buttons should typically be placed at the bottom right of the container or in the center of the container at full-width. If using text links, they should typically be placed at the bottom-center of the dialog along with any buttons. Dialogs should include a maximum of two buttons. Confirming buttons should be aligned to the end of the screen. See the example below for reference, where the confirming button is on the right and the dismissing button is to its left. Avoid overly complex or interactive content in dialogs Be careful with the level of interactivity and complexity of content inside of a dialog. Avoid using scrollbars in dialogs. Make sure that the dialog contains only the essential information and actions. Consider other options, such as a separate page, for content that takes up a lot of space or requires several actions. Dialog should be used with a scrim Using a scrim with the dialog helps distinguish it from the primary screen in the background. It will help users understand that the dialog is layered above the parent page, shifting the user’s focus appropriately and aligning with best practices for accessibility. When designing in Figma, pull in the scrim component from the WPDS UI kit to use it in your design. Consider screen size when determining the appropriate size for the dialog Avoid fullscreen dialogs on desktop. On desktop, a dialog should only take up a portion of the screen, with visibility of the primary screen behind it. Ideally, it shouldn’t take up more than 25% of the screen on large screens and desktop. On tablets and mobile, dialogs may take up a larger portion of the screen, typically 50% to 100%, as the screen size will be smaller. Note that these percentages are not exact rules but provide general guidelines to follow. Ensure that the most critical information goes on the topmost layer The most critical information should be on the topmost layer, regarding Z-index/layering of the dialog on the page. Do not use nested dialogs Using a nested dialog creates visual complexity. Multiple layers of information and actions can be confusing to users. Use clear, consistent language in dialogs Dialog content should be as concise as possible while still effectively communicating its message to users. When writing headers and buttons, use explicit button text that indicates exactly what will happen and match headers to corresponding buttons. For example, for a dialog labeled “Save your changes,” instead of using buttons labeled “Yes” and “No,” use wording that is more direct and actionable such as “Save” and “Discard.” --- Accessibility Keyboard interaction The dialog component is accessible via keyboard interaction. When the dialog trigger or close buttons are focused, the “space” key will open and close a dialog. The \"tab\" key can be used to navigate focus on the next interactive element contained in the dialog. Pressing “shift + tab” can be used to navigate focus on the previous interactive element contained in the dialog. The element currently in focus is denoted by an outline, using the CSS outline property. Pressing the \"enter\" (\"return\") key will trigger or commit the action of the focused element. Pressing the “escape” key closes the dialog. Include a title and description An accessible title and optional accessible description should be included to be announced by screen readers when the dialog is opened. Take a look at the code to see the title and description for this example dialog. --- API Reference",
    "url": "/components/dialog",
    "path": "components/dialog.mdx"
  },
  {
    "title": "Divider",
    "description": "A divider is a thin rule or line that creates visual separation in a layout.",
    "kicker": "",
    "content": "Anatomy 1. Divider --- Options Orientation Dividers can be used to separate individual items in a list, or to to provide clearer visual distinction between two or more grouped elements. They can be oriented vertically or horizontally, depending on the layout in which they occur. Color Sometimes it&#39;s helpful to use dividers as a means of delineating sections of a page or key areas of content. In many cases, a “strong” divider placed above the content can be used to mark the start of a new section and helps distinguish the area from the surrounding layout. Behavior Fill Container By default, a divider line should span the full horizontal or vertical dimension of its parent element. The actual height or width of the containing element should derive from its content, unless otherwise specified. API Reference",
    "url": "/components/divider",
    "path": "components/divider.mdx"
  },
  {
    "title": "Drawer",
    "description": "A drawer is a panel that is typically overlaid on top of a page and slides in from off-canvas (tied to a side of the screen). It contains a set of information or actions. Since the user can interact with the Drawer without leaving the current page, tasks can be achieved more efficiently within the same context.",
    "kicker": "",
    "content": "Anatomy 1. Container 2. Button icon 3. Scrim --- Options Position The drawer can be attached to any side of the screen. Optional Close The drawer close button icon can be optional. Optional Scrim The scrim is optional when using the drawer. Should note that without a scrim, it is recommended to have a close button to ensure users can close the drawer if that is desired. Optional Scrim color The scrim color can be changed by defining the color using one of our background colors from our tokens Drawer color The drawer color can be changed by defining the color using one of our background colors from our tokens. Height and Width Drawer width and height can be defined. Height can be defined if the position is top or bottom and width can be defined if the position is right or left. --- Behavior Closing When the close button icon is rendered, the drawer can be closed by either clicking the scrim or the close button. Note: The drawer can be set to open and will remain open even if the scrim is clicked on. Content overflow Content will overflow, both vertically and horizontally, in the drawer by default. --- Guidance Content should be accessible Do not combine colors of the drawer where text is not accessible to the user. Read more about WCAG accessible contrast requirements. Avoid full screen A drawer should never take the fullscreen of the viewer window. The drawer should always leave at least 1/3 of the screen available. --- API Reference",
    "url": "/components/drawer",
    "path": "components/drawer.mdx"
  },
  {
    "title": "Icon Component",
    "description": "The icon component sets the size of an icon and adds a label that will be announced by screen readers.",
    "kicker": "",
    "content": "Anatomy 1. Container 2. Icon glyph 3. Label Visually Hidden --- Options Size The size can be 100, 150, or 200. The size sets the width and height of the SVG. Label The label is required for screen readers. It is used to describe the icon to screen readers. It is also used as the aria-label for the icon. It is recommended to use a short, descriptive label. For example, \"Go to Next Page\". --- API Reference",
    "url": "/components/icon",
    "path": "components/icon.mdx"
  },
  {
    "title": "Input Password",
    "description": "",
    "kicker": "",
    "content": "Anatomy 1. Password value 2. Password Label 3. Input container 4. Button Icon --- Options Helper Text Helper text can be added to the input. --- Behavior Hidden value The password input by default renders the password hidden. Focus Click password input to demostrate the focus state. Error Disabled Text Overflow --- Guidance Ensure the width of the field appropriately sized Password lengths can vary based on user preference; ensure any reasonably long password will be fully visible within the input. --- API Reference",
    "url": "/components/input-password",
    "path": "components/input-password.mdx"
  },
  {
    "title": "Input Search",
    "description": "Input Search is a component that allows users to enter keywords and receive matching search results.",
    "kicker": "",
    "content": "--- Anatomy 1. Label/Placeholder 2. Input 3. Clear button 4. Search button 5. Value 6. Divider 7. Result 8. Result container --- Options Portal Determine whether the result container should be rendered as part of the search component and occupy space, or act more like a popover with a positional relationship. Grouping The search component supports a default group label that includes an optional icon. This feature can be utilized to help organize content and support multiple result groups. By default, the component returns results as a single list of items. The order in which they are returned depends on how the data is sorted prior to being passed. Open on focus Setting 'open on focus' to false will prevent the result container from appearing when there is no value in the input, or the value has not changed. --- Behavior Autocomplete Determines if the value is the input changes or not as the user navigates with the keyboard. If true, the value changes. If false, the value doesn't change. Disabled Selected When a user has made a selection, the results container will collapse when the portal is set to false or disappear when the portal is set to true. Overflow The results container has a default max-height of 300px and when there are more results it will overflow with a default scrollbar. Input with value When the input has a text value, a clear button will appear to allow the user to easily clear the input value and set it to an empty value. Loading results When results are being loaded a default behavior of a loading state will be shown. Empty: No Results When there are no matching results the default behavior is to show them empty no result state. Matching results When a result is matched to the keyword the font weight will be light to the matching keys and the rest of the characters as bold. Results :Hover When a result is hovered with a mouse it will change background color $faint. --- Guidance Results can be more than text Results can be more than just a list of text. Depending on how you handle matching results, there could be space for recirculation, a different hierarchy in how results are displayed, and a more intuitive and visual discovery process. When to use icons Results can be overwhelming depending on the query. To differentiate between different types of results, use icons to help users wayfind and scan the results. Helpful filtering Helpful filtering can help folks get to their results faster without having to type in the correct keywords. Some ideas can include inputs like switches, and tabs. Mobile best practices There might be instances where a dedicated search view might be more appropriate. Utilizing the pattern of our drawer can be an effective way to do this. Pre-populated results Pre-populate the dropdown when the search is in focus, letting users quickly scan and refine their choice before even searching. --- Accessibility Color contrast All colors in the default combobox have been reviewed to ensure they meet the AA WCAG contrast requirement of at least 4.5:1 for normal text and 3:1 for large text. Keyboard controls Users can navigate search results using arrow keys on their keyboard and select a result by pressing the return key. This feature streamlines the search experience, reduces search time, and improves accessibility. --- API Reference",
    "url": "/components/input-search",
    "path": "components/input-search.mdx"
  },
  {
    "title": "Input Text",
    "description": "A text field is an input that allows a user to write or edit text.",
    "kicker": "",
    "content": "Anatomy 1. Input value 2. Label/Placeholder 3. Border 4. Button Icon 5. Contextual Icon (non-actionable) 6. Optional Helper text --- Options Icon Icon has two placements left or right. Types Text input supports the following text inputs: text search url tel email. Helper Text Input text supports an optional help text. --- Behavior Focus Click input text component to demostrate focus. Error Success Required Disabled Text Overflow Overflow of the input value is indicated by an ellipse. --- Guidance Actionable inputs Inputs that require user to take action and include an icon should have the icon be right. A left icon is meant for contextualizing the input. API Reference",
    "url": "/components/input-text",
    "path": "components/input-text.mdx"
  },
  {
    "title": "Input Text Area",
    "description": "A text area lets users enter long form text which spans over multiple lines.",
    "kicker": "",
    "content": "Anatomy 1. Label 2. Value 3. Border 4. Browser Default drag icon --- Options Resize The text area can prevent reize by setting canResize to false. Helper text The text area has optional helper text. --- Behavior Default The text area can resize by default. Error Success Required --- Guidance Do not use textarea for single or short inputs Textarea are for multiline text such as a sentence or a paragraph. API Reference",
    "url": "/components/input-textarea",
    "path": "components/input-textarea.mdx"
  },
  {
    "title": "Navigation Menu",
    "description": "A group of text links used for navigating between related pages or individual sections within a page.",
    "kicker": "",
    "content": "--- Anatomy 1. Menu link (text label / trigger) 2. Submenu indicator 3. Active state (bold) --- Options Orientation Navigation menu supports both horizontal and vertical layout orientations. In horizontal orientation, menu links are baseline-aligned, ordered from left to right. In vertical orientation, menu links are left-aligned, ordered from top to bottom. Submenus Navigation menu supports one level of sub-navigation. --- Behavior Hover Menu links change color to $accessible on hover. Submenu links display background color $faint on hover. Active Any menu link can be set to active to indicate the page or section currently in view. Active links are rendered in font-weight bold. Disabled A menu (or submenu) link can be set to disabled, according to the user’s current context and relevance of options. Overflow For submenus containing a large number of links, define a max-height and set the container to scroll to allow users to access additional items. --- Guidance Number of menu items For primary navigation, the maximum number of menu links recommended is eight (8). If your use case requires more than 8 menu links, re-evaluate your navigation hierarchy to make use of submenus, or consider using a different component. --- Accessibility Keyboard navigation When navigation menu is in focus, links can be traversed using left, right, up and down arrow keys, or tab / shift+tab. Pressing the enter key executes a click function, which will navigate the user to the selected link. Links containing a submenu can be accessed by focusing the link and pressing space bar to toggle display of the submenu. Pressing the esc key exits the submenu and moves focus back to the parent link / trigger. --- API Reference",
    "url": "/components/navigation-menu",
    "path": "components/navigation-menu.mdx"
  },
  {
    "title": "Pagination Dots",
    "description": "Pagination Dots indicate progress through a range of elements.",
    "kicker": "",
    "content": "--- Anatomy 1. Container of dots --- Options Index Index determines the position of the currently active dot. Amount This is the total amount of dots in the range. Orientation If the dots are oriented left to right or top to bottom. It defaults to a horizontal orientation. --- Guidance Only controllable externally An external component must be implemented to dynamically control the index and/or amount of dots. A typical use case would be a carousel of pictures. --- Accessibility The root node has the role progressbar. The label prop is required, and the unitName prop is optional. When unitName is specified, the aria-valuetext will work with aria-valuemax and aria-valuenow to read the pagination progress. For example, if unitName=\"Page\", the aria-valuetext will read \"Page aria-valuenow of aria-valuemax\". --- API Reference",
    "url": "/components/pagination-dots",
    "path": "components/pagination-dots.mdx"
  },
  {
    "title": "Pagination",
    "description": "A pagination component is a navigation interface using the button component to breaks large amounts of content into smaller, more readable pages.",
    "kicker": "",
    "content": "--- Anatomy 1. Page navigation button 2. Unselected page button 3. Selected/current page button 4. Page overflow button 5. Page indicator 6. Item range indicator\\ \\Item range indicator is especially valuable in data-heavy interfaces where users need to navigate through large sets of information efficiently. It may be omitted where space is limited or such precise context isn't necessary. Note: The page navigation and unselected page buttons use the secondary variant of the button component. The selected (also known as current) page button uses the secondary variant with disabled state styles, but with onSecondary color token and bold font for the text instead. --- Options Numeric display The numeric display option renders page numbers as interactive, clickable buttons in a familiar sequential format, allowing users to quickly jump to specific pages. Descriptive display For situations requiring more explicit navigation context, the descriptive display option presents the current position using a textual format, which enhances clarity and accessibility. Compact display When space efficiency is paramount, the compact display option implements a streamlined fraction-style presentation, efficiently communicating position while minimizing interface real estate. No display The no display option eliminates visual page indicators entirely while preserving essential navigation functionality, and is ideal for minimalist designs. --- Behavior Triggers - When clicking the next or previous page buttons, the page numbers update and content transitions smoothly. - The overflow button triggers the next set of sequential numbers, allowing users to jump three pages. --- Guidance Endless pagination Endless pagination, also known as infinite scroll, should be reserved for content-heavy scenarios like article feeds or large datasets, as implementing it for standard navigation can lead to poor user orientation, difficulty in reaching specific pages, and potential performance issues. Including the first page in the numeric display variant can help users return quickly to the beginning of their content journey without having to navigate through multiple steps. Mobile and smaller screens Implement a responsive pagination component with a mobile-optimized fallback variant. The component should dynamically switch to a compact UI based on viewport dimensions or container constraints, ensuring consistent UX while maintaining core navigation features across all device sizes. --- Accessibility Keyboard controls --- API Reference",
    "url": "/components/pagination",
    "path": "components/pagination.mdx"
  },
  {
    "title": "Popover",
    "description": "A popup element that displays rich and actionable content. Unlike a tooltip, the popover is persistent and remains on the screen until dismissed.",
    "kicker": "",
    "content": "--- Anatomy 1. Content Container --- Options Positioning The Popover can be positioned top, left, right, and bottom with each having ability to be positioned at the start, center, or end of the trigger. Note: This option sets the preferred position of the popover to render against when open. Will be reversed when collisions occur with other elements. } /> Density There are two options for the property density compact and default. Offset The property sideOffset can use any spacing token to offset its position from the origin point of the tooltip. The default offset is the spacing token 025. --- Behavior Avoids collisions When close to the edge of the viewable area the side will be reversed to be visible. --- Guidance Avoid using popover for non-actionable ui Popovers should not be used to display non-actionable ui that could otherwise live in something less persistent like a tooltip. Do not nest Popovers or Tooltips Popovers should not have additional tooltips or popovers within the same content container. --- Accessibility Keyboard controls A Popover will show/hide without delay when the trigger is in focus and space/enter is selected on the keyboard. If the Popover is open and either shift+tab, or tab, is selected on the keyboard it will move focus to the next focusable element. When Esc is selected on the keyboard it will close the popover and move the focus to the trigger. --- API Reference",
    "url": "/components/popover",
    "path": "components/popover.mdx"
  },
  {
    "title": "Radio Group",
    "description": "Use radio buttons when you have a group of mutually exclusive choices and only one selection from the group is allowed.",
    "kicker": "",
    "content": "Anatomy 1. Radio container 2. Border 3. Filled container --- Options Variants There are three variants primary secondary and cta --- Options isOutline Default value Radio buttons can be preselected or not depending on the situation. Orientation Radio groups can be either horizontal or vertical. By default, radio groups are vertical. --- Behaviors Disabled Focus Error Text Overflow --- Guidance When error should be shown Error should only occur if the options were not pre-selected and user tries to continue without selecting an option. Required radio groups should be indicated in the label with a \\ in the error token color. Suplementary error message should be shown below the group. Required When radio button selection is required it should be reflected in the fieldset label. Avoid using radio buttons for a binary choice The toggle or checkbox is most often used for settings and allows the user to choose between yes/no options or on/off. --- API Reference",
    "url": "/components/radio-group",
    "path": "components/radio-group.mdx"
  },
  {
    "title": "Select",
    "description": "A select is a type of form element that provides a method for choosing one item from a list of options.",
    "kicker": "",
    "content": "--- Anatomy 1. Selected value 2. Label/placeholder 3. Helper text (optional) 4. Chevron icon (actionable) 5. Border 6. Check icon (indicates selected option) 7. Options list 8. Option hover state 9. Option --- Options No styling options The select component currently only supports one size and variant. --- Behavior Options list (Active) Clicking or tapping the select field initiates the active state, revealing an options list that consists of a set of values. When in the active state, the label/placeholder is reduced in size and the chevron icon rotates 180 degrees, pointing upwards. The options list may contain as many values as needed and becomes scrollable if there are more options than what is currently in view. Making a selection (Active) The options list can be navigated by mouse hover or via the up/down arrow keys (indicated by a faint highlight). clicking or tapping an option in the list will select the chosen value (indicated by the check icon) Once a selection is made, the chosen value is displayed within the select field and the options list is automatically dismissed. Selection can also be achieved by pressing the Enter/Return key while an option is highlighted. to cancel selection/dismiss the options list, click or tap outside the element or press the Esc key. Select groups The options list can be segmented into groups. Grouping options within a select field can be helpful for creating categories or subcategories of similar items. Text overflow Overflow of the selected value is indicated by an ellipsis Show required Focus Error Success Disabled --- Accessibility ARIA Assistive technologies (e.g. screen readers) announce the element clearly to users, including its role, name and state. Accessibility The listbox position is adjusted (i.e. does not get cut off the screen). --- API Reference",
    "url": "/components/select",
    "path": "components/select.mdx"
  },
  {
    "title": "Switch",
    "description": "A visual control that allows the user to toggle between a binary state of “on” and “off”.",
    "kicker": "",
    "content": "--- Anatomy 1. Unchecked background fill 1. Thumb (Indicator) 1. Checked Background fill 1. Border --- Options Variant Two variants are supported primary and cta --- Behavior Checked When the switch is checked it will transition to the on position. Error When the switch is a requirement it will show an error border color. Required No visual indication when required. See guidance on required switches Disabled Disable the switch when it is not editable. Disabled switches cannot be clicked. Focus When the switch is in focus a outline with the color signal will appear around the switch. Tab into the switch to see the focus state. --- Guidance Required Switches When making switches required always pair it with a label that has the required indicator. Switches control binary options Don’t use switches to control states that cannot clearly be categorized as either on or off. Label Pairing Switches should always be paired with a contextual label. It is also good practice for accessibility to have a text equivalent of the state (on or off) is displayed adjacent to the graphical state indicator. --- Accessibility Space / Enter toggles switch When the switch is in focus and the user presses space or enter it will toggle the switch from its current check state to the opposite state. Pairing label To make understanding the state of the switch easier for users with visual or cognitive disabilities, a text equivalent of the state (on or off) is displayed adjacent to the graphical state indicator. CSS attribute selectors ensure the label displayed is synchronized with the value of the aria-checked attribute. NOTE: To prevent redundant announcement of the state by screen readers, the text indicators of state are hidden from assistive technologies with aria-hidden. Cursor Switches should have the cursor switch to pointer when the cursor is hovering over the switch. Non-Text Contrast > For active controls any visual information provided that is necessary for a user to identify that a control is present and how to operate it must have a minimum 3:1 contrast ratio with the adjacent colors. Also, any visual information necessary to indicate state, such as whether a component is selected or focused must also ensure that the information used to identify the control in that state has a minimum 3:1 contrast ratio. - W3.org Reduce motion If user has indicated that they prefer reduced motion the switch thumb should not animate and instantly position to its enabled/disabled position. --- API Reference",
    "url": "/components/switch",
    "path": "components/switch.mdx"
  },
  {
    "title": "Table",
    "description": "Information organized in rows and columns",
    "kicker": "",
    "content": "",
    "url": "/components/table",
    "path": "components/table.mdx"
  },
  {
    "title": "Tabs",
    "description": "Tabs are used to navigate between sections of content in the same area without reloading the page.",
    "kicker": "",
    "content": "--- Anatomy 1. Tab 2. Selection indicator 3. Icon (optional) 4. Tab bar --- Options Selection This option indicates whether a tab is selected (and thereby showing content) or not. Alignment This option determines whether the tabs are left or center aligned along the tab bar. Density This option determines the overall size of the component: compact, default, or loose. --- Behavior Hover Hovering over an unselected tab causes a lighter selection bar to appear below. Disabled A disabled tab changes to color subtle. Tab overflow When there are more tabs than can be displayed, the behavior will match our secondary navigation. The tabs will be cut off and hidden on the far right and accessible via scrolling. --- Guidance Tab number Use at least 2 tabs or more. Text overflow Avoid using long titles for tab copy. Thirty characters or less is our recommendation. If text does overflow, it is truncated with an ellipsis and the full text is shown in a tooltip on hover. Icon placement Don't put icons on the right. Linking Tabs should not link to another page. Icons When using icons, it is best to use them as a prefix to the label, rather than following the label. This ensures that the icon is properly associated with the label and is more easily recognizable by users. --- Accessibility Keyboard interactions Using the left and right arrow keys will move focus between tabs. You can press enter to make that focused tab active. --- API Reference",
    "url": "/components/tabs",
    "path": "components/tabs.mdx"
  },
  {
    "title": "Tooltip",
    "description": "Non-actionable UI element that only contains text and does not require the user to take action but serves only to inform the user before taking an action, contextualizing an action, or act as simply supplementary information to an element.",
    "kicker": "",
    "content": "--- Anatomy 1. Content Container 2. Arrow --- Options Positioning The tooltip can be positioned top, left, right, and bottom with each having ability to position at the start, or end of the content container. Note:{ } This option sets the preferred position of the tooltip to render against when open. Will be reveresed when collisions occur with other elements. Density There are two options for the property density: compact and default. Offset The option offset can use any spacing token to offset its position from the origin point of the tooltip. The default offset is the spacing token 025. --- Behavior Avoids collisions When appropriate, helper text should be placed closest to the Legend. --- Guidance Do not hide content A tooltip is not meant to hide necessary contextual information. It should only be used as a supplementary element. The nautre of a tooltip is non-persistent and should not require users to discover content within a tooltip. Avoid nesting actionable elements The nautre of the tooltip is non-persistent. When the user is required to take an action on an element nested inside the tooltip it makes the action less accessible for those with limited mobility. Do not nest Popovers or Tooltips Tooltips should not have additional tooltips or popover within the same container. --- Accessibility Design considerations While tooltips are a convenient way of revealing content, please keep in mind the nautre of a tooltip and how it shows/hides on hover. consider alternatives like a more persistent element like a popover. Keyboard controls Tooltips will show/hide without delay when the trigger is in focus and tab is selected on the keyboard. If the tooltip is open and either escape, space, or enter is selected on the keyboard, it will close the tooltip. --- API Reference",
    "url": "/components/tooltip",
    "path": "components/tooltip.mdx"
  },
  {
    "title": "Visually Hidden",
    "description": "A common pattern used in web applications is to hide content from sighted users but still maintain it for screen readers.",
    "kicker": "",
    "content": "Options VisuallyHidden accepts props.children to set the label. --- Accessibility Visually hides an element from sighted users but still maintains it for screen readers and other assistive technologies. This is a common pattern used in web applications. --- Implementation",
    "url": "/components/visually-hidden",
    "path": "components/visually-hidden.mdx"
  },
  {
    "title": "Base size",
    "description": "",
    "kicker": "",
    "content": "Base size token refers to the value that controls the value scale of size, space, font-size, and radius.",
    "url": "/foundations/base",
    "path": "foundations/base.mdx"
  },
  {
    "title": "Breakpoints",
    "description": "",
    "kicker": "",
    "content": "WPDS has 5 breakpoints with the following values - sm: 768px - md: 900px - lg: 1024px - xl: 1280px - xxl: 1440px WPDS Media At-Rules Using Rules Responsive Variants Stitches recommends defining variants that are applied responsively to keep component styles immutable. Breakpoints in Style Objects While not recommended it is possible to use breakpoints inline Using the Responsive Screen Size React Hook The useResponsiveScreenSize hook can be used to get the current screen size and use it in your components. The hook is only available in the browser and will return{\" \"} unknown on the server. An example using the hook Our Spectrum render engine uses the hook to render a drawer on small screens and a dialog on larger screens. This is a simplified version of the code used in the Spectrum render engine.",
    "url": "/foundations/breakpoints",
    "path": "foundations/breakpoints.mdx"
  },
  {
    "title": "Color",
    "description": "Color token values are defined by their context. There are two contexts we currently support a \"light\" and \"dark\" context. Toggle the sun/moon in the top right of the site to see each context.",
    "kicker": "",
    "content": "Overview {/ WORK WITH NEWS DESIGN - Color Use /} Tokens --- General Concepts Color themes and device color modes aren't synonymous; themes are tailored to apps, while modes are system-wide settings that impact device theming. {/ Start of Grid Section /} {/Column one of Grid /} {/ Column two of Grid /} Color Used generically to refer to named colors (e.g., blue). Tint A lighter value of a color. Shade A darker value of a color. Tone A less saturated version of a color. Alternatively used as a synonym for tints or shades. {/ End of Grid Section /} --- Contrast Ratio The measurable difference in lightness between two comparative using the WCAG relative luminance formula. {/ Start of Grid Section /} {/Column one of Grid /} {/ Column two of Grid /} Target contrast ratio The desired contrast ratio between two color values when one of the color values is generated by a color tool. For accessibility, large text should have at least a 3:1 ratio for AA compliance, and small text should have at least 4.5:1 for AA and 7:1 for AAA compliance. WPDS strives to maintain AAA (contrast ratio of 7:1). See WCAG for details. {/ End of Grid Section /} --- Semantic Structure The following is the semantic structure of our theme tokens. --- Color modes It's important to differentiate between color themes and device color modes. Color themes reflect specific design preferences, whereas device color modes are part of the operating system settings that influence the entire device's appearance. Typically, devices offer two modes: light mode and dark mode. {/ Start of Grid Section /} {/Column one of Grid /} {/ Column two of Grid /} {/ End of Grid Section /} --- Theme Tokens The theme palette is an abstraction that assigns color across the product with intention, creating an alias for color use. In our design framework, \"on\" colors are used on top of primary, secondary, surface, background, or error colors. For example, \"on primary\" is a color used over a primary color. These colors are mainly for text, icons, and strokes, though they can be used on surfaces as well. --- Surfaces The relationship between surface, elevation and shadow. Surface, background, and portal colors typically don't represent brand: Surface and portal colors affect surfaces of components, such as cards, and menus, but will change in dark mode to create elevation & hierarchy. The background color appears behind scrollable content. The baseline background, surface, and portal color is gray700. {\" \"}",
    "url": "/foundations/color",
    "path": "foundations/color.mdx"
  },
  {
    "title": "Icons assets",
    "description": "",
    "kicker": "",
    "content": "Note: Icon assets should be used in our Icon component If you do not see an icon that you require for your project, please refer to our WAM (WPDS-Asset manager) on how to contribute. We also offer a guide on how to use custom icons found [here[(/resources/guides/creating-custom-icons) Available icons",
    "url": "/foundations/icons",
    "path": "foundations/icons.mdx"
  },
  {
    "title": "Logos assets",
    "description": "",
    "kicker": "",
    "content": "If you do not see a logo that you require for your project, please refer to our WAM (WPDS-Asset manager) on how to contribute.",
    "url": "/foundations/logos",
    "path": "foundations/logos.mdx"
  },
  {
    "title": "Principles",
    "description": "In our pursuit to create a seamless, user-friendly, and visually coherent digital environment, The Washington Post is committed to establishing a robust design system. This system will serve as the foundation upon which all our digital products are built, ensuring consistency, efficiency, and accessibility across all user interfaces. Below are the principal guidelines that will steer our design system toward achieving reusable, functional, adaptable, predictable, and accessible designs.",
    "kicker": "",
    "content": "Table of contents - Reusable - Functional - Adaptable - Predictable - Accessbile --- 1. Reusable Component Reusability - Modularity: Design components should be modular, meaning they can be reused in various parts of the application without being modified. - Consistency: Ensure visual and functional consistency across all platforms and products to foster a unified brand image and enhance user familiarity. - Documentation: Maintain comprehensive documentation for each component, detailing its purpose, usage guidelines, and implementation code to facilitate easy adoption by other teams and projects. --- 2. Functional User-Centered Functionality - User Needs: Prioritize user needs and ensure that every design component serves a clear, user-oriented function. - Performance: Ensure components are optimized for performance, minimizing load times and ensuring smooth interactions. - Reliability: Design components should consistently perform their intended function across all use cases and user flows. --- 3. Adaptable Responsive and Scalable Design - Responsiveness: Ensure components are designed to provide an optimal user experience across all screen sizes and orientations. - Scalability: Design components should be able to handle variations in content and functionality without compromising user experience or aesthetic appeal. - Globalization: Consider localization and internationalization to ensure the design system is adaptable to different languages and cultures. --- 4. Predictable Intuitive and Predictable Interactions - Consistency: Maintain consistent design patterns and interactions across all components and layouts to reduce the user's cognitive load. - Feedback: Provide clear and immediate feedback in response to user actions to confirm outcomes and guide next steps. - Guidance: Implement clear, intuitive wayfinding and familiar ui so users understand and can predict how a component behaves/functions when they see it on our product. --- 5. Accessible Inclusive and Accessible Design - Universal Design: Ensure that all components are designed to be usable by as many people as possible, including those with disabilities. - Compliance: Adhere to WCAG (Web Content Accessibility Guidelines) to ensure that digital content is accessible to all users, including those with disabilities. - Inclusive Imagery and Language: Utilize imagery and language that reflect diversity and inclusivity, ensuring that all users feel represented and welcomed. --- Conclusion The Washington Post is dedicated to providing a superior user experience through a design system that embodies these principles. By adhering to these guidelines, we ensure that our digital products are not only aesthetically pleasing but also user-friendly, accessible, and efficient across all platforms and user demographics. This documentation serves as a guide and should be referred to during the design and development processes to ensure alignment with our overarching design philosophy",
    "url": "/foundations/principles",
    "path": "foundations/principles.mdx"
  },
  {
    "title": "Radius",
    "description": "",
    "kicker": "",
    "content": "Radius tokens are relative to the baseSize. Use radius tokens to define the border-radius of an element. When using border-radius tokens in code, you can access them using theme.radii[tokenName]",
    "url": "/foundations/radius",
    "path": "foundations/radius.mdx"
  },
  {
    "title": "Shadow",
    "description": "Shadow tokens are predefined box-shadow values.",
    "kicker": "",
    "content": "When using shadow tokens in code, you can access them using theme.shadows[tokenName]",
    "url": "/foundations/shadow",
    "path": "foundations/shadow.mdx"
  },
  {
    "title": "Size",
    "description": "",
    "kicker": "",
    "content": "Size tokens are relative to the baseSize. Use size tokens to specify a fixed width or height when designing a component or layout. When using size tokens in code, you can access them using theme.sizes[tokenName]",
    "url": "/foundations/size",
    "path": "foundations/size.mdx"
  },
  {
    "title": "Space",
    "description": "",
    "kicker": "",
    "content": "Space tokens are relative to the baseSize. Use space tokens to define padding or margin when designing a component or layout. When using space tokens in code, you can access them using theme.space.[tokenName]",
    "url": "/foundations/space",
    "path": "foundations/space.mdx"
  },
  {
    "title": "Typography",
    "description": "",
    "kicker": "",
    "content": "Table of contents - Font - Font size - Font weight - Line height --- Font Font tokens tie an intention to a font family. --- Font size Font size tokens are relative to the baseSize. Use font size tokens to define the size of the font. --- Font weight Font weight tokens define the weight of the font face. --- Line height Line height tokens are unitless values that define the height of a text element based on its current font size.",
    "url": "/foundations/typography",
    "path": "foundations/typography.mdx"
  },
  {
    "title": "Asset-Manager (WAM)",
    "description": "WPDS Asset-Manager (also known as WAM) manages all assets as raw SVG files. The asset manager is an independent package that allows for more streamlined management of our assets.",
    "kicker": "",
    "content": "Table of contents - Getting started - Design principles - Icon design principles - Icon requests - Contributing --- Getting started How to use in Figma To use WAM, please enable the WPDS-Asset-Manager in your libraries to gain access to all the icon glyphs and the logos. Please note if you are looking to use the icon as a component, we recommend using our icon component. How to install Note: WAM requires React to adopt into your project. npm i @washingtonpost/wpds-assets Example When applying a fill to an icon we recommend using currentColor and let the parent style the fill color --- Design principles Visual style The visual style of our icon set uses minimal lines and geometries. As a result, our icons use 1px lines and basic shapes to represent the glyph. The corners of most our icons are sharp and rarely round. Our icons geometry rarely use a fill. Still, when an icon has a fill, it is tied to a toggle state or required visual weight to satisfy hierarchy in the instances that they are. Other assets Other assets like logos do not follow any principle other than approved brand guidelines. Assets need to be clear in what they represent and have guidance around their use. --- Icon design principles Base size There are four keyline shapes an icon can have as a base. All of the shapes require a 1 px padding on all sides. Keyline shapes There are four keyline shapes an icon can have as a base. All of the shapes require a 1 px padding on all sides. 1. Square 2. Circle 3. Rectangle - vertical 4. Rectangle - horizontal Dive Deeper In this video Design Lead, Peter Hershey shares our guiding principles when designing an icon for our design system. --- Request We welcome all requests for a new icon that may not exist in our current set. You can request an icon by emailing WPDS@washpost.com with the subject Icon request or using our slack flow ✏️ Icon request. After you submit, the process will be as follows: 1. Your proposal request is submitted. 2. There will be a review process in which the Icon task force will approve or deny the request. 3. After approval, your icon will be placed in the backlog ready to picked up by any contributor or task force member. 4. All icon requests are bundled in semi-monthly releases. On the 15th and end of every month. You can expect your icon to be released in the upcoming release cycle unless otherwise noted or if the request was submitted 5 days before the upcoming release. FAQ When can I use my icon? WAM is released on a semi-monthly cycle. Once it is released in a cycle it will be available in both code and design through WAM. What kind of icon proposals are denied? The denial of a request can include but be limited to: Icons that repeat an intended function, Icons that are named the same, Icons that are offensive, hateful, or non-inclusive, Icons that do not serve an intended function, and icons whose intended function is too complex to represent visually. Can I submit an icon design with the request to fast-track it? Yes, you can submit a design for consideration. If it follows our contribution guideline and requirements for svgs, it can be used to bypass the five days before the release deadline requirement. --- Contributing For every submission, we require a review of the guideline checklist and follow the approval process. It will save you a lot of time before creating an icon to submit. So please review the following: 1. All icons are unique and not a repeat of any existing icons. Please review our current icon set and double-check if there are any conflicts. 2. Icons adhere to our Design principles. 3. Icons work across all devices and platforms. 4. Icons should be understandable by a global audience regardless of nationality, language, or device preference. Making an icon You can create the icon in any tool of your preference. There are a few things to consider & required when creating and designing an icon. They are as follow: 1. Avoid using the line tool, and use the rectangle tool to avoid half pixels. 2. Consider turning on pixel snapping if that is capable in your device of choice. 3. Never use center borders as they create half pixels. 4. Consider converting lines to outline paths. 5. Ungroup icon layers and have the icon be the topmost layer. 6. Ensure that the SVG file exports with a title that does not conflict with an existing icon name. 7. Must use one of our keyline shapes. 8. Combine all shapes and paths when possible. Production ready To be considered production-ready, all icon proposals must be an SVG file. Any icons that fail to meet the guidelines will be rejected and require a resubmission unless otherwise noted. Approval process Icons submitted to WAM must go through an approval process by WPDS. The process begins when a proposal has been made on our #WPDS slack channel or to our email WPDS@washpost.com. After receiving a proposal, it will undergo a review by our team. The approval of icons can take between 7-14 days. The length depends on how many revisions are needed and the number of icons in the proposal. If your submission is accepted, the team will notify the proposal's approval. We will update WAM with the new icon(s) with the next release. See all of our Icons or Logos",
    "url": "/foundations/wam",
    "path": "foundations/wam.mdx"
  },
  {
    "title": "Z-index",
    "description": "Z-index tokens define the layer spaces on the z-index for our applications.",
    "kicker": "",
    "content": "",
    "url": "/foundations/z-index",
    "path": "foundations/z-index.mdx"
  },
  {
    "title": "End Of April 2022",
    "description": "Updates to our documentation, Figma plugin, WAM and new input components are now in draft status. Soon to be released. Read more the learn about all of our changes.",
    "kicker": "Release",
    "content": "Ui kit v0.8.0 Added - Input password moved into draft status - Input text moved into draft status - Input Textarea moved into draft status. Fixed - disabled button doesn't change background on hover by @klimenkoff9 in #94 - change Stitches.PropertyValue type to \"margin\" by @mjperales in #92 --- WAM v1.7.1 Added - Trash icon - Search + Nav icon - Election logos added Updated - Change Headphones from outline to filled - Fixed release cycle on 15th and end of every month. - remove yarn from engines in package.json by @alexisbarnes in #99 --- Doc site & Plugins v1.0.3 Added - Figma plugin updated to import directly from our JSON token to prepare for the upcoming updated color palette. - New component docs in draft status. - Bundle size and install added to all components - Publishing date on all resources. Updated - WAM documentation is updated with new contributions and icon task force requirements. --- What's next? - Improvements to our coding sample load time - Update color palette works to begin and will impact our current color tokens. - Upcoming components in the works right now - Docs for Helper text and Error message - Radio button - Divider - Design concept: complete - Figma UI kit component: complete - Accordion - Design concept: complete - Figma UI kit component: refinement",
    "url": "/release-notes/End Of April 2022",
    "path": "release-notes/End Of April 2022.mdx"
  },
  {
    "title": "v1.0.0",
    "description": "Welcome to the new v1 Design System and Documentation website! build.washingtonpost.com. The new site will allow teams to utilize new components to gain efficiencies, build consistently, and innovate rapidly!",
    "kicker": "Release",
    "content": "👀 Take a look at what we've added recently! New - Visually hidden - Alert banner - App bar - Container - Icon component - Tokens: color, size, space, base size, radius, shadow, font-size fonts, font-weight, line-height - New doc site, new guides for: figma, zeplin and contribute a component - Figma Plugin and Figma Ui kit - Zeplin extension and Styleguide - Asset manager (How to contribute, icon search page, logo page) - New icon set - Checkbox -Draft - Button -Draft - Checkbox -Coming soon --- Components coming up in March 🗓 v1.1.0 1. Dividers (A ruled line for visually separating content) 2. Password field (An input field password text) 3. Image (An HTML image tag that applies a style to rasterized Maintains aspect ratios and maintains text) 4. Text (Assortment of text styles including Paragraphs, headlines, etc…)",
    "url": "/release-notes/v1.0.0",
    "path": "release-notes/v1.0.0.mdx"
  },
  {
    "title": "v1.0.1",
    "description": "We are proud to announce Checkbox and Button are out of Draft status and are stable!",
    "kicker": "Release",
    "content": "--- Ui-Kit v0.6.2 New We are proud to announce Checkbox and Button are out of Draft status and are stable! - Checkbox - Button Fixes - Theme: We fixed an issue with Apple Safari browsers where our root font size was not working as we expected. - Icon: fill prop did not let the user override the default value. It does now. Updates The following API updates affecting components that were in Draft: - Button: stop using the Size prop and now uses density. Density has an opinion on the padding of the element. --- Asset Manager (WAM) v1.4.0 New - New assets for smiley faces Fixes - Updated elections logo and fixed the Facebook icon asset --- Docs Site v1.0.1 New - New supported platforms resource - We added Alex lint to our linting processes. Fixes - General fixes to our code embed affecting devices with small screens Updates - Updated React guide to reflect our position on server-side rendering with React Ui kit - We are filtering out future posts from displaying",
    "url": "/release-notes/v1.0.1",
    "path": "release-notes/v1.0.1.mdx"
  },
  {
    "title": "v1.0.2",
    "description": "Minor Doc site v1 updates, homepage support, and design/dev workshop/outreach.",
    "kicker": "Release",
    "content": "--- New - New bell icon added to WAM v1.5.0 to support a homepage test. Updates - Zeplin guide update includes new step by step. - Update Figma guide includes new step by step - Icon search page now includes the names - Remove interactions from button component. (Figma interactions were causing bugs for people prototypes so the button no longer has interactions shipped with the component.) Fixes - Icon search page’s input - we fixed a VQA bug - Fixed link to Stitches.dev on Tachyons post --- Whats next? - Divider component under review - Radio button approved under review - WPDS Design workshop 2 (Working with our new Figma components) - WPDS Developer Workshop #1 Again! 🥳 We sold out so we gotta put on another show! - Image component has been pulled from review. We decided it’s best to leverage existing technologies like Next.js’s Image component (https://nextjs.org/docs/basic-features/image-optimization). We will have a foundation doc and resource guide on laying out Images soon.",
    "url": "/release-notes/v1.0.2",
    "path": "release-notes/v1.0.2.mdx"
  },
  {
    "title": "Accessibility Checklist",
    "description": "Overview of considerations, not comprehensive",
    "kicker": "Accessibility",
    "content": "--- The following checklist is derived from the much more detailed WCAG guidelines. This does not cover every possible accessibility issue but aims to cover the most prominent varieties. It’s meant to be an entry-level guide. For help with any part of the guide, or to request an addition to any of our docs, contact accessibility@washpost.com. We can also share copies of this checklist as .md files upon request. Important: Repeat all steps below on all screen sizes (mobile, tablet, desktop) to better evaluate accessibility across devices. Many of the checklist items link out to more detailed instructions from our accessibility docs on how to test. We provide a 5-minute video tutorial going through a portion of the checklist. Thanks for incorporating accessibility considerations into your work! 1. Screen reader & keyboard controls It might seem complicated, but this testing often takes only a minute or two! Use the links below and reach out with any questions. - Navigate content with keyboard only Press the tab key (setup needed if using Firefox and Safari) and shift + tab to cycle forward and backward through the buttons, links, hoverable elements and any others the user should be able to interact with, ensuring (a) they each receive appropriate focus styles and (b) they are clickable with the enter key (links and buttons) and/or space key (buttons). Each time you press tab, you should see something change on the page. If not, there is a missing focus style or tab index issue. See the full list of keyboard controls for details on other behavior, like what arrow keys and escape should do. - Test with screen reader linearly Using a screen reader (guidance on using screen readers), navigate the page from top to bottom. You can click with your mouse to position the screen reader, which is helpful for testing specific parts of a page. Ensure all visible text is read aloud with correct pronunciation and in a sensible order. - Test with screen reader rotor Open the screen reader rotor (caps lock + U with VoiceOver) and ensure all links, buttons and other elements have appropriate names. Interactive elements should not have generic names like \"click here.\" You should be able to understand what each link or button does from the rotor menu without other context from the page. - Confirm heading order is correct Check the page headers using a screen reader. Does the heading order make sense? There should be only one h1, the page title. From there, headings should be ordered strictly by page hierarchy (don't jump from h2 to h4, don't use h2 as a subhead of an h3, etc.). - Confirm page landmarks are present and have correct content Are the base page landmarks (main, nav, header, footer) present? If there is complementary page content like a sidebar or right rail, is it in an aside tag? Are the landmarks accessible with a screen reader? They should contain the right content to help screen readers scan the page quickly. --- 2. Multimedia - Ensure all images have alt text Follow the guidance for writing alt text. If an image is purely decorative, make sure it still has alt or alt=\"\" present in the HTML. Similarly, videos and gifs should have text descriptions for screen reader users. - Test with reduced motion settings turned on Turn on reduced motion, and ensure all non-essential animation and other moving content is eliminated upon page refresh. If not, then you should use the prefers-reduced-motion media query to modify behavior accordingly. - Hide useless content from screen readers Just as you would put alt=\"\" for purely decorative images to hide them from screen readers, you should add aria-hidden=\"true\" for content on the page that is not screen reader friendly. An example might be an election map full of svgs and labels, etc. You can include a table version of the data or some other alternative for accessibility, and then hide the map with aria-hidden. - Avoid auto-playing audio and video Never auto-play audio. Auto-playing video, animations and other graphics (including gifs) are strongly discouraged. Ensure all audio and video instances have an accessible pause, stop or hide button. - Eliminate rapidly flashing content Videos, gifs and animations must not include any instances of flashing or blinking more than 3 times within any one second, as this is a seizure risk. - Provide captions and transcripts Anywhere there is audio, there should be a transcript provided. Videos with audio should include captions in addition to transcripts. Both should include words spoken AND any other meaningful sounds from the audio (such as a sigh or laugh in conversation, or the chopping of a knife in cooking) as well. --- 3. Text, labels & zoom settings - Ensure text is readable and in plain language Text should be no smaller than 12px and written in plain language wherever possible. Is there any jargon or use of idioms? These should be avoided. - Ensure text decoration is not needed to understand meaning Do you use underlined text ( example ) or struck-through text (example)? Text decorations like these are often not recognized by screen readers and are often confusing to other users, too, so they are generally not recommended. If you do use text decoration to convey meaning, then you must also provide other ways for users to understand the meaning of decorated text. - Ensure non-English content is labeled as such Content in non-English languages, such as Arabic or Spanish, must have the lang=\"CODE\" attribute set, where CODE is the language code e.g. “ar” for Arabic or “es” for Spanish. There’s a list of language codes. This is essential for non-English text to be read correctly by screen readers. Additionally, Arabic and some other languages are read right-to-left. In those cases, we need to set an additional attribute in the HTML, dir=\"rtl. - Clearly label interactive content Meaning of icons, buttons and other elements should be explicitly conveyed via text whenever possible. In all cases, interactive elements should have appropriate aria-labels. See our guidance on labeling for screen reader users. Avoid user prompts or notices that disappear automatically. If the content includes a form, make sure that clear prompts and error messages are provided. See our guidance on forms. - Change page zoom level and browser zoom settings Set page zoom to 200% (on a Mac, press command + to zoom in). Does text scale correctly? Is it still readable (no overflow, overlap, etc.)? Then, Restore the page zoom to 100% and increase the font size in your browser settings to 200%. Does text scale correctly? Is it still readable? --- 4. Color - Confirm white text is never on a pure black background White text on a pure black background causes a fuzziness known as halation for many users with astigmatism. See our guidance for avoiding halation. - Confirm black text is never on a pure white background Black text on a pure white background causes eye strain among many users. See our guidance for avoiding eye strain. - Ensure color contrast meets the WCAG AA standard All color combinations, especially for text and interactive elements, must meet at least the AA (preferably AAA) color contrast standard using the WebAIM tool. - Check contrast for common forms of colorblindness Ensure color combinations meet the AA color contrast standard for colorblind users among at least the three most common forms of colorblindness. - View the page in dark and light mode Dark mode and light mode should both be supported. Does the page change to light or dark mode automatically per browser settings? Does the page pass color contrast thresholds in both modes? And does everything change color correctly upon toggling to light or dark? Are all links, buttons, fonts, etc. on the page still visible? --- 5. Automated testing (will not catch most issues) If you are a developer, read our documentation on automated testing for info about adding automated checks to your code. - Run the WAVE tests Install the WAVE Chrome extension and then use it on the page (guide to using WAVE). The tool is great for beginners, as it allows you to learn about different types of issues by clicking interactive labels that appear on the page. Fix any issues that are flagged. - Run the axe DevTools tests Install the axe DevTools Chrome Extension and then use it on the page (guide to using axe DevTools). Fix any issues that are flagged.",
    "url": "/resources/accessibility/accessibility-checklist",
    "path": "resources/accessibility/accessibility-checklist.mdx"
  },
  {
    "title": "Alt text",
    "description": "Describing images for blind and low-vision users",
    "kicker": "Accessibility",
    "content": "--- ​​Alt text is read aloud to screen reader users, often people who are blind or have low vision, so that they understand what is in an image they cannot see. Alt text may also be shown to sighted users in place of an image that is unable to load. It is commonly called alternative text or an image description. Technical implementation (img vs. svg) and fallbacks For img tags Alt text is supplied via the alt attribute on img tags. An example of this is . Every img tag should have the alt attribute. Failure to explicitly set this value may lead to the image file name being read out loud to screen reader users, which is often an unhelpful user experience. If we explicitly set alt=\"\", then the image will be skipped by screen readers. If an image is purely decorative and/or repeated for dramatic effect (for example, you have a series of snowflake images scattered across a winter-themed page), then it is best practice to use alt=\"\". You should have something like . Note: If your img tag's src is the path to an SVG, then you should add role=\"img\" to the img tag. It may seem redundant, but this helps screen readers treat the SVG correctly when reading alt text. So we should have . For svg tags svg tags do not have the alt attribute, but we can still provide alt text for SVGs. We recommend using whichever of the following two methods is most appropriate for your use case. Method 1: Set aria-hidden=\"true\" on svg and add alt text elsewhere (preferred method) Note: We use a span to house the alt text in the example below, but you may find another element type, such as a table, is better suited to describe certain svg contents. In the past, The Post has used an sr-only table as an alternative to a map svg to share county-level election results with screen reader users. For our WPDS Icon component, we use the following steps: 1. Add aria-hidden=\"true\" to the svg tag so that it is skipped by screen readers. 2. Add a span next to the svg (as an immediate sibling element) and apply the sr-only class or Visually Hidden wrapper so the span is readable only by screen readers. 3. Add the alt text for the svg into the newly added span element. Since this alt text is not in an img element, screen readers will not be told that the text is describing an image by default. This is a case where you should explicitly add \"image\" (or in the example below, \"icon\") to the alt text. Below is an example of how this works. Inspect the icon with the Chrome developer tools to view the HTML and CSS. Or, better yet, test it out with the screen reader of your choice. Method 2: Use aria-labelledby with title tag and aria-describedby with desc tag (a lightweight solution for when Method 1 isn't doable) 1. Add a title tag as the first child of the svg tag (as shown in the example below) to provide a brief description of the image. The title may also be viewable to sighted users who hover over the svg with a mouse. 2. If the image cannot be described with a brief (approximately one sentence) title, then add a desc tag below the title tag to provide more details. As an example, the desc for an SVG graphic may list out specific details from the graphic whereas the title briefly summarizes the graphic's appearance and purpose. Individual rects, circles and other visual elements within an svg tag can have their own titles and descs, but we recommend just one title and one desc at the root level — as described above — for a more straightforward user experience. 3. Give the title and desc tags unique id attribute values. Then, in the svg tag, set aria-labelledby=\"id of title tag goes here\" and aria-describedby=\"id of desc tag goes here\". 4. Since we do not apply aria-hidden=\"true\" to the svg tag in this method, we must apply aria-hidden=\"true\" to each text tag within the svg. Otherwise the title and desc tags may not be read correctly. Note that the \"visible text\" element in the example below is not read by a screen reader but is mentioned as part of the alt text in the desc tag. Select \"Show code\" below to view our implementation. This is a model you can follow for your own SVGs. a11y-101.com demonstrates other ways to label the heart svg above, including their shortcomings. Carie Fisher, a Senior Accessibility Consultant and Trainer at Deque Systems, also performed a study comparing different alt text placements for SVGs. In summary, there is not a perfect solution to alt text for SVGs. We recommend Method 1 above as a means of getting around this. Defining fallback values for alt text If an image is important to understanding an article or product, then fallbacks for alt text should not be used. The field should be required in those cases. However, there are some circumstances where fallbacks for alt text can be helpful, if done correctly. We have an engineering blog post with more context on fallbacks for alt text and how they can affect user experience. The best fallback in most cases: alt=\"\" alt=\"\" is usually the best fallback for alt text. Alt text needs to be thoughtfully written, and other fallbacks will likely be unhelpful and potentially even confusing or misleading for users. Anywhere an unknown image may be missing alt text (for example, old content with many non-essential images is being ported to a new platform), it is better to use alt=\"\" than to risk getting something wrong with another fallback. Do not use a generic value like \"Image\" or \"Image without alt text\" as a fallback. This text is useless to screen readers and clutters the user experience. When other fallbacks can be used If you have some basic context on what an image contents, such as a name or caption field, then you may be tempted to use this as fallback alt text. However, this can lead to a redundant user experience if the name and caption are already rendered elsewhere on the page where the image appears (for example, a profile picture is rendered right next to the person's name). As shown below, captions serve a different purpose than alt text anyway. An example of where non-empty fallback alt text could be helpful: Imagine you have a live-updating feed of recent purchases from vending machines and are rendering them as their product images from the front of the vending machine. Sighted users can read the labels in the product images, so there aren't text labels in the page HTML. The database you are working with has a required name field for each vending machine item that matches what is written in the product image, so you can use that name field as fallback alt text when more descriptive alt text has not yet been written. In cases like these where fallback alt text other than alt=\"\" is actually helpful, this is often an indicator of other issues. For example, it would be better to render the name as text for all users in the situation above than to rely on them reading it from images. --- Captions vs. alt text explained Alt text is not the same as a caption. A caption is generally adding context to an image, whereas alt text is describing what the image contains for those who can’t see it. Consider The Post's caption for the below image: \"This image released by NASA on July 12 was captured by the James Webb Space Telescope. (AP)\" The caption is effective. It adds useful context for readers: when the image was released, who released it and how it was taken. The caption also credits AP (The Associated Press) for providing the image. NASA wrote the following alt text for the image above: \"The image is divided horizontally by an undulating line between a cloudscape forming a nebula along the bottom portion and a comparatively clear upper portion. Speckled across both portions is a starfield, showing innumerable stars of many sizes. The smallest of these are small, distant, and faint points of light. The largest of these appear larger, closer, brighter, and more fully resolved with 8-point diffraction spikes. The upper portion of the image is blueish, and has wispy translucent cloud-like streaks rising from the nebula below. The orangish cloudy formation in the bottom half varies in density and ranges from translucent to opaque. The stars vary in color, the majority of which have a blue or orange hue. The cloud-like structure of the nebula contains ridges, peaks, and valleys — an appearance very similar to a mountain range. Three long diffraction spikes from the top right edge of the image suggest the presence of a large star just out of view.\" Most images should not have alt text as long or complex as the example above. However, this example shows the purpose of alt text. When we use an image in our work, it is our job to describe in text what the image contains — in the way most contextually relevant to where it appears — for blind and low-vision users. In this case, NASA wanted to capture the detail of the image because that was its relevance to the story being told: the power of the new telescope and the level of detail it unlocked. Below is guidance on how to approach alt text in different scenarios that are common in media. --- How to write useful alt text Alt text for images of text All of the text from an image you want your users to see should also be included in the alt text for that image so blind and low-vision users can hear it. For instance, an image of a headline should have the headline also added in the alt text field. You may add additional context, such as \"Screenshot of a Washington Post headline that says, 'Eagles lose Super Bowl 38-35'\" where \"Eagles lose Super Bowl 38-35\" is the exact headline from the screenshot. Below is an example from The Washington Post Twitter account. Alt text for data visualizations Data visualization alt text should focus on the visualization type, the type of data shown and the reason for including the visualization. Read more detailed guidance on alt text for data visualizations from Amy Ceval, co-founder of the Data Visualization Society. Below is an example from The Washington Post Twitter account. Alt text for other images 1. Describe the type of image, if relevant. Don't use generic phrases like \"Picture of\" or \"Image of\" because screen reader users already know when they are hearing alt text for an image. If the image has a specific type (illustration, graphic, headshot, etc.), then it is probably relevant to note that, as done in the example below. 2. Be concise. Alt text doesn't need to describe every tiny detail in an image, just the relevant parts for the overall meaning. Typical alt text is no more than a few sentences. If the image is complex, this may be longer, but try to keep it as short as possible while including all necessary details. 3. Never assume race, gender, etc. If known, use these and other identifiers when relevant to the image or context in which the image is used. Note that the subject of the image may have their own preferences on how they are identified for the purposes of a story or other content. 4. Avoid including your opinion on the image. Alt text should be an objective description. Words like \"pretty\" or \"scary\" are generally not useful. Focus on what is happening in the image. 5. Write in plain language so that the alt text's meaning is clear. Avoid complicated words and sentence structures. Avoid jargon and idioms. We have more guidance on plain language. Below is an example from The Washington Post Twitter account. --- Things to exclude: hyperlinks and emojis Hyperlinks Links are not clickable when used in alt text. A screen reader user may hear each character in the link read out one by one and will be unable to click the link anyway. Include links in the text surrounding the image instead of in the alt text, and make sure to follow our hyperlink text guidelines for that. Don't just take our word for it; try it yourself. Use a screen reader to listen to a hyperlink in alt text. You will probably hear something like \"h-t-t-p-colon-slash-slash\" and so on. It is a bad user experience. Emojis Alt text is for people who cannot see the image. Emojis and symbols often have confusing or unintended text when read by a screen reader, so they should be avoided entirely. Similarly, avoid emoticons like :) in your alt text and elsewhere. Screen readers may not recognize them and may instead read them as punctuation. --- How to handle punctuation and hashtags Punctuation Listen to your alt text using a screen reader to understand how punctuation affects the way it is read aloud. Deque provides a guide to special characters for screen readers, which gives context on how some punctuation is read by screen readers. But online guides are not a substitute for manual testing. Guides become outdated quickly as screen readers evolve and change. Hashtags and CamelCase Social media hashtags are a form of hyperlink and thus won't be clickable in alt text. If a hashtag is essential to the alt text because it is the name of a movement or effort, for instance, then it should be included in the alt text with CamelCase formatting. CamelCase involves capitalizing the first letter of each word in a multiple-word hashtag. This allows screen readers to distinguish words in a hashtag and increases legibility for everyone. For example, use #TheWashingtonPost instead of #thewashingtonpost. Capitalize the letters in acronyms and initials as well. For example, use #WPMedia instead of #Wpmedia. --- SEO considerations SEO is not the purpose of alt text. We write our alt text to make content more accessible to real users. Google warns us not to stuff keywords into alt text: \"Avoid filling alt attributes with keywords (also known as keyword stuffing) as it results in a negative user experience and may cause your site to be seen as spam.\" So, trying to abuse the alt text field for SEO can actually end up hurting your SEO. Consider the potential SEO benefits of alt text to be a positive side effect of making our content more accessible.",
    "url": "/resources/accessibility/alt-text",
    "path": "resources/accessibility/alt-text.mdx"
  },
  {
    "title": "Audio and Video",
    "description": "Captions, transcripts, controls, avoiding auto-play",
    "kicker": "Accessibility",
    "content": "--- Audio Auto-play Never auto-play audio. Pause, stop or hide button All audio should have an accessible pause, stop or hide button so that users can turn the audio off as needed. Transcripts See our transcripts section. --- Video (including gifs and animations) Avoid flashing content Content that flashes can trigger seizures or other adverse effects for some users. Nothing should flash on the screen more than 3 times within a single second. In general, flashing content should be avoided entirely. Avoid auto-play Auto-playing video content in any situation is strongly discouraged. Pause, stop or hide button All videos, gifs or animations should have an accessible pause, stop or hide button. Captions Any time a video includes audio, there should also be captions provided. These should include words spoken AND any other meaningful sounds from the audio (such as a sigh or laugh in conversation, or the chopping of a knife in cooking) as well. Closed captions are preferable so that users can turn them on or off per their preferences. Ensure captions have appropriate color contrast with the video (rendering captions as white text on a dark gray background is common), and keep the captions in sentence case. Avoid kinetic captions, which are captions with \"fun\" effects like changing text size and location, which make them harder to read and thus less accessible. Below is an example of how captions should look on a video. Transcripts See our transcripts section. Video descriptions Don't rely on video alone to convey important information. Video descriptions should be provided in text so that blind and low-vision users understand what the video shows. --- Transcripts guidance Anytime there is audio or a video including audio, there should also be a transcript provided. These should include words spoken AND any other meaningful sounds from the audio (such as a sigh or laugh in conversation, or the chopping of a knife in cooking) as well. Transcripts should be prominently placed near the audio or video they transcribe. Don't hide transcripts behind other menus. Below is a good example of prominent transcript placement. Timestamps are usually not necessary and can make transcripts unnecessarily cluttered. Speaker names should be provided whenever there is more than one speaker in a video or audio. See the example below. Always confirm transcript accuracy manually when using automated transcribers. --- Animations and reduced motion Some users, including those with vestibular motion disorders, may have system settings to reduce motion in the web content. For instance, on a Mac, there is a \"Reduce motion\" toggle in the System Settings under Accessibility/Display: We have to write code that recognizes these system settings in order to adjust motion accordingly. To do this, we use the prefers-reduced-motion CSS media feature, as documented by MDN. Our Tooltip component uses prefers-reduced-motion to decide whether to include an animation when tooltip content is opened. If the user does not have reduced motion settings turned on, then the animation is used. We built a shortcut media query \"@reducedMotion\" for use in our WPDS components. It does the same thing as @media (prefers-reduced-motion). Below is an example of how this looks in practice. The code is from our Carousel component. Note the animation is eliminated when the user prefers reduced motion:",
    "url": "/resources/accessibility/audio-and-video",
    "path": "resources/accessibility/audio-and-video.mdx"
  },
  {
    "title": "Automated testing tools",
    "description": "Useful for catching some (but not all) issues",
    "kicker": "Accessibility",
    "content": "--- Intro Automated testing is generally believed to catch around 30-50 percent of accessibility issues on a page. They are a useful tool in achieving accessibility, but they are not sufficient for full testing. Below are some automated testing tools that we use at The Post. --- WAVE Evaluation Tool (Google Chrome extension) WebAIM's WAVE Evaluation Tool extension provides an interactive testing suite that is a good starting point for automated accessibility testing. There is a video guide to using WAVE, but we'll go over the basics here as well. After installing, select the puzzle piece icon in the top right of the Chrome browser and select the tool from the dropdown, as shown below. Selecting the tool will open a menu if errors, alerts and other notices on the page. The interactive visual experience makes WAVE helpful for beginners. Click on the icons that appear throughout the page to understand what each is signaling. WAVE should always be used alongside the axe DevTools described below. Don't rely on only one tool or the either. Use both. --- axe DevTools (Google Chrome extension) Install the axe DevTools extension. There is a video guide to using the axe DevTools, but we'll go over the basics here as well. To test a page with the axe DevTools, open the developer tools in Chrome and select axe DevTools in the console dropdown, as shown below. Once in the axe DevTools menu, you can select \"scan ALL of my page.\" Finally, you will receive a list of errors on the page that you can expand to view. You can even see where in the page HTML the error occurs. This is very useful for catching and fixing issues. --- axe-core testing library In addition to the Chrome extension, the axe testing suite is available in a set of npm packages so that you can configure the tests to run automatically. Each package has more details in its README on how the package is used. We also recommend jext-axe for unit testing, though it is not part of the axe-core library. --- Linting with jsx-a11y Pair the axe-core npm packages with the eslint-plugin-jsx-a11y npm package to improve your automated testing. Per the package's developers: \"This plugin does a static evaluation of the JSX to spot accessibility issues in React apps. Because it only catches errors in static code, use it in combination with @axe-core/react to test the accessibility of the rendered DOM. Consider these tools just as one step of a larger a11y testing process and always test your apps with assistive technology.\" The jsx-a11y developers provide a list of everything covered by jsx-a11y's automated checks. --- Storybook automated tests Storybook is a valuable tool for viewing your components in isolation and conducting testing. We recommend reading the Storybook accessibility docs for more information.",
    "url": "/resources/accessibility/automated-testing",
    "path": "resources/accessibility/automated-testing.mdx"
  },
  {
    "title": "Color",
    "description": "Contrast, colorblindness, light and dark mode standards",
    "kicker": "Accessibility",
    "content": "--- Motivations Low color contrast can make text and other page elements harder to see for everyone, especially users with disabilities and many older users. One common form of disability is colorblindness, but there are many forms of color blindness with different effects on perception of color. When working with meaningful content such as text, visuals and user inputs, it is important to ensure users can easily distinguish between elements. There are additional considerations we must make to avoid eye strain and a blurred effect known as halation for some users. --- Color contrast standards The Post's accessibility statement notes that we are guided by the WCAG 2.1 Level AA standard. However, we strongly encourage meeting the level AAA standard whenever possible. Since 2021, WPDS has provided a library of grayscale and color tokens designed with adherence to WCAG's AA standard in mind. Within our token library, there is a theme token labeled accessible, which maps to hex value #666666 in light mode and #858585 in dark mode. The contrast ratio is 5.7 when the accessible color is used in light mode on a pure white (#FFFFFF) background and in dark mode on a pure black (#000000) background. To ensure acceptable color contrast when using other color tokens, you will need to test manually. --- Testing color contrast, including for colorblind users Use the below tools in conjunction with each other to ensure colors meet contrast standards for both colorblind and non-colorblind users. You should also use the tools to test your selected colors in both light mode and dark mode whenever both are offered. WebAIM Color Contrast Checker The WebAIM Color Contrast Checker evaluates colors for WCAG compliance. You enter the hex values for the foreground and background colors, and the site calculates the contrast ratio. It rates the colors with a “Pass” or “Fail” rating. You can use the slider under each color to lighten or darken it until a “Pass” rating is attained. The hex code will update accordingly. Adobe Color Contrast Checker The Adobe Color Contrast Checker has a different UI than the WebAIM tool, so try both to see which better fits your needs. David Nichols' coloring for colorblindness tool The coloring for colorblindness tool allows you to input a color palette and see how that palette appears to users with different forms of colorblindness. You can inspect the resulting colors in your browser to collect their hex codes and independently verify they have enough contrast with each other. Adobe Color Blind Safe tool The Adobe Color Blind Safe tool has a different UI than David Nichols' tool, so try both to see which better fits your needs. One advantage of the Adobe tool is that it has a built-in warning when colors are deemed to conflict for at at least one form of color blindness. Learn more on Adobe's webpage about its tools. --- Avoiding eye strain and halation While you may be tempted to use black text on a white background — and vice versa — for maximum color contrast, these combinations raise other issues. Within our color tokens library, there is a theme token labeled accessible, which maps to hex value #666666 in light mode and #858585 in dark mode. The contrast ratio is 5.7 when the accessible color is used in light mode on a pure white (#FFFFFF) background and in dark mode on a pure black (#000000) background. Avoid white text on black backgrounds Never use white (#FFFFFF) text on a black (#000000) background (in any circumstance, but be especially weary of this in dark mode). This causes a fuzziness effect known as halation for many readers with astigmatism, and it makes reading difficult. You can use light gray text instead of white, and/or a dark gray background instead of black, to avoid this issue. View our color tokens library — including the accessible token mentioned above — for more info. Avoid black text on white backgrounds Never use black (#000000) text on a white (#FFFFFF) background (in any circumstance, but be especially weary of this in light mode). Pure black text on a white background is known to cause eye strain among many users. You can use dark gray text instead of black, and/or a light gray background instead of white, to avoid this issue. View our color tokens library — including the accessible token mentioned above — for more info. --- Dark mode vs. light mode settings Light or dark, or both? It is best practice to support both light and dark mode on all content. This includes conducting the contrast tests described above in both modes. All links, buttons, fonts, etc. on the page should be visible in both modes. Respecting browser settings Many users will have dark mode configured in their browser and/or system settings. When possible, we should build responsively and default to light or dark mode based on user settings without them having to manually click a toggle on our page. A good way to respond to user settings is the prefers-color-scheme CSS media feature, as documented by MDN. --- Avoiding color coding Even if you have fully accounted for contrast, colorblindness and compatibility with various user settings like dark mode, you should never rely purely on color coding to convey information to users. Screen reader users will always need text explanations of content. Others have their devices set to grayscale, so colors are mostly indistinguishable. Furthermore, colors may also have different cultural meanings across users, leading to confusion over the selection of colors and what it all means. Save yourself and your users the trouble by using text to convey the meaning of anything that you're tempted to convey via color.",
    "url": "/resources/accessibility/color",
    "path": "resources/accessibility/color.mdx"
  },
  {
    "title": "Keyboard accessibility",
    "description": "Ensuring content is navigable without a mouse",
    "kicker": "Accessibility",
    "content": "--- Setup Some browsers require setup for keyboard navigation to work as expected. - In Safari, the tab key does not exhibit the behavior described below by default. You can press option and tab at the same time instead, or go into your Safari preferences and turn on “Press Tab to highlight each item on a webpage” in the \"Advanced\" pane of the preferences menu. - In Firefox for MacOS, you may need to toggle the following setting on before using keyboard navigation: Apple > System Settings > Keyboard > Keyboard navigation. --- Keyboard focus Some people use the keyboard (or another controller mapped to keyboard keys) instead of a mouse in order to navigate page content. For a user to know that they can \"click\" an element with their keyboard (including elements that would exhibit some behavior upon mouse hover), that element must be focusable. To be focusable means the element can be selected individually via keyboard controls. Try opening one of our pages in Google Chrome, and repeatedly press the tab key on your keyboard. You will notice that certain elements (but not every element) become highlighted or get a ring around them as you keep pressing tab. The tab key is just one of many keyboard controls available to users. --- Focus rings Keyboard users need a visual cue that a clickable or hover-able element (whether it is a button, div, link or something else entirely) is in focus as they navigate the page. This lets them know when they can click something and what it is, since they are not using a visible mouse. The only elements that should be highlighted or have a ring around them during keyboard navigation are the ones that are interactive. All links and buttons should be focusable, but a paragraph of plaintext without any links in it should not be focusable. We have a className=\"focus-highlight\" Site Components Tachyon for adding the visual cue to focusable elements. If the CSS or component logic specifies that something should happen when an element is hovered or clicked with the mouse, then that same functionality (or an accessible version) should be achievable via pressing one or more keys on the keyboard. You may be in a hurry to implement some function on a div and only add the onClick event. This makes the element impossible to use with the keyboard. So don't forget onKeyDown. Note that onKeyPress is deprecated. There is a blog post describing why onKeyDown is best. If you are working with an element that is non-focusable by default (like a div), then you will need to make sure the element is focusable by adding two things: (a) tabIndex={0} to make the element tab-focusable (c) role=\"button\" so that screen readers let users know that it can be clicked Elements like links and buttons should be focusable by default, but make sure to always verify since people may accidentally disable this functionality without even knowing it. --- How to navigate with a keyboard only Try out the following to get a better sense for how people navigate web content without a mouse. Make sure to follow the setup instructions first if using Firefox or Safari. Note the different controls for different types of interactive elements. Buttons are clickable via either space or enter, whereas links are only clickable via enter. - Tab: Next focusable element - Shift Tab: Previous focusable element - Enter: \"Click\" currently focused link or button - Space: Scroll down the page or — if applicable — \"click\" currently focused button (includes toggling a checkbox or radio button) - Up/Down arrows: Scroll up/down the page or — if applicable — move between radio buttons and, in some cases, menu links - Right/Left arrows: Adjust sliders in audio and video players or, in some cases, move between menu links - Escape: Close an element that has appeared dynamically, such as a popup menu or dialog. After the dynamic element closes, focus should return to where it was before the element was opened. --- Limiting keyboard events to specific keys In almost all cases, you don't want just any key on the keyboard triggering the event you added via onKeyDown. At The Post, we have gotten around this by using onKeyDown wrapper functions like the examples below: When incorporated into a div with an onKeyDown function, which was the first example on this page, the resulting code looks like the following: --- Skip to main content It is The Post's practice to include a \"skip to main content\" link in the header nav of all pages on our website. This is a widely used standard to help keyboard users more efficiently navigate page content. Who wants to have to tab through the same links over and over on each page of a website? The skip link gets around this by jumping the user to the unique page content, which we mark with the dom id main-content in our code. You have to start navigating the page with your keyboard to discover this link, which is hidden to sighted users when not in keyboard focus. Open washingtonpost.com and try hitting the tab key on your keyboard. You will get something like the following: When you click this link using enter on your keyboard, you should expect to be jumped to the first clickable element in the unique page content (excluding ads, nav menus and other boilerplate that is consistent across pages). If nothing happens, it means your page does not have a dom element with the id main-content. This is a bug, so remember to always confirm that one and only one dom element in your code has id=\"main-content\".",
    "url": "/resources/accessibility/keyboard-accessibility",
    "path": "resources/accessibility/keyboard-accessibility.mdx"
  },
  {
    "title": "Plain language, symbols and forms",
    "description": "Clear and inclusive writing, navigating special characters",
    "kicker": "Accessibility",
    "content": "--- Plain language standards Writing in plain language makes our content more accessible to a wide variety of people, including those with cognitive disabilities, lower reading literacy and less background knowledge of the topic or concept being covered. This also matters in the design of user interfaces. The U.S. federal government has detailed plain language guidelines and a checklist. These are based on the Plain Writing Act of 2010. While we are an independent media organization, a lot of the guidance is relevant to us. In particular, we strongly recommend the following: - be concise - use short sentences and clear structure - use familiar, commonly understood words - define any uncommon words or concepts - avoid jargon, idioms and metaphors - avoid excessive words and punctuation - use the simplest tense possible - use lists and tables to simplify complex material --- Icons, emojis and ASCII art Icons Meaning of icons, buttons and other elements should be labeled with visible text whenever possible. In all cases, interactive elements should have appropriate aria-labels for screen reader users. Emojis and other symbols Avoid relying on emojis or symbols. Emojis and other symbols may have confusing or unintended meanings, especially across generations and cultures. They are also annoying for blind and low-vision screen reader users. They should be avoided unless they are central to the content. If you need to use emojis, consult Unicode's emoji list to ensure the emojis translate well and appear as you expect across different devices and systems. They should be visible with sufficient contrast in light and dark mode. Make sure to include visible text descriptions alongside all emojis to clarify meaning. ASCII art ASCII art typed directly into a page is not accessible to screen readers. However, screenshots of ASCII art with appropriate alt text included are okay. Create the ASCII art on your own device and take a screenshot of the art you produced. Then you can post the screenshot and include alt text describing the ASCII art for blind and low-vision users. When a screenshot is not an option, you can provide a text alternative of the ASCII art before it and then include an anchor link for users to skip past the ASCII art. --- Text decoration Underlines ( example ), strikethroughs (example) and other text decorations are often not recognized by screen readers and can confuse other users, too, so they are not recommended. If you must use text decoration to convey meaning, then you must also provide other ways for users to understand the meaning of the decorated text. For example, when using a strikethrough to visually label something as \"completed\" or \"done,\" you should also include a label next to the struck-through text that explicitly says \"completed\" or \"done.\" - Buy ingredients (completed) - Travel home (completed) - Cook dinner You can follow a similar approach when using underlines and strikethroughs to denote added and removed content in an updated version of a document, perhaps one being shown to readers as part of a news article: The new content (added) in the document can thus be differentiated from the old content (removed) more easily. --- Hashtags and CamelCase CamelCase involves capitalizing the first letter of each word in a multiple-word hashtag. This allows screen readers to distinguish words in a hashtag and increases legibility for everyone. For example, use #TheWashingtonPost instead of #thewashingtonpost. Capitalize the letters in acronyms and initials as well. For example, use #WPMedia instead of #Wpmedia. --- Forms and user input Clear error messages should be provided so that users know when and how to correct their input. Similarly, avoid user prompts or notices that disappear automatically, as this creates a frustrating user experience when the user cannot access something they need in time. Label all fields clearly, and don't rely on placeholder text that disappears when a user begins filling out the field. Don't require users to drag things around to fill out a form or complete some other task. Remember that not everyone uses a computer mouse. WebAIM provides more guidance on accessible forms.",
    "url": "/resources/accessibility/plain-language-and-labeling",
    "path": "resources/accessibility/plain-language-and-labeling.mdx"
  },
  {
    "title": "Screen readers",
    "description": "How to use them and why you need to do so",
    "kicker": "Accessibility",
    "content": "--- Intro Some people who are blind or low-vision use assistive technology known as a screen reader to hear the content on a page read aloud to them. They use controls to move between elements on a page, and the associated text and/or function is read aloud. This is one purpose of alt text; it is read by a screen reader to describe an image for those who cannot see it clearly. Similarly, interactive elements should often be labeled in code using aria-labels. It is important to navigate a page manually with a screen reader while testing for accessibility. There are a number of different screen readers with their own quirks. On desktop, we strive to test with both VoiceOver and NVDA. On mobile devices, we strive to test with both VoiceOver and Talkback. --- VoiceOver (MacOS and iOS) VoiceOver is a screen reader built into Apple operating systems MacOS and iOS. There is no need to do an installation. You can turn VoiceOver on via command + F5 on a Mac, or in your accessibility settings on iOS devices. MacOS After turning on VoiceOver, click \"Learn More\" to explore the controls via the quick start guide. Apple has detailed documentation on how to use VoiceOver, but we have highlighted some basic commands below. Basic MacOS controls Note: The VO referenced from now on is the \"VoiceOver Modifier\" key(s) that allow you to run VoiceOver commands. By default, VO is triggered via your caps lock key or control + option, but you can open the VoiceOver Utility (VO + F8) to change it. - command + F5: Turn VoiceOver on/off - VO: Pause or unpause VoiceOver while it is reading content aloud - VO + Right/Left arrows: Navigate to next/previous page element - VO + shift + Up arrow: Move out of a child element and into the parent area/group, if applicable (for example, while reading this list I can press VO + shift + Up arrow to exit the list entirely and return to the parent article, instead of having to finish the list and other article content first) - VO + shift + Down arrow: Move into a child element (for example, while reading a list element like this one I can press VO + shift + Down arrow to interact with the individual words and characters in the text one at a time) - VO + A: Begin reading all remaining page content in order from the current position - VO + U: Open the VoiceOver rotor, covered in more detail below - Escape: Close the rotor or another VoiceOver menu that has been opened All other keyboard controls also work while using VoiceOver. Again, these are not all the available commands. This is a beginner's guide. Debugging with VoiceOver on a Mac Use the commands outlined above to navigate a page. Make sure all text on the page is readable in a sensible order and that images have alt text. Buttons and elements that are mouse-hoverable should be labeled with aria-labels, and you should hear those labels read by VoiceOver. As a sighted user, you may find it useful to click on the page with your mouse to position VoiceOver on an element. You can then test normally from there. This is only advisable when debugging one specific part of a page. You will also see info about the currently selected element in a little box on your screen. This is the same text that is being read to a user, so make sure the text is appropriate. This goes for alt text, labels and anything else that VoiceOver can access on the page. Make sure to also attempt navigating the entire page with VoiceOver from start to finish. You may run into keyboard accessibility issues that are also VoiceOver issues. For instance, does the page have a skip to main content link? Is every clickable element on the page also clickable with VoiceOver? iOS After turning on VoiceOver in your iOS device's accessibility settings, your controls will immediately change. It takes practice to get used to the VoiceOver iOS controls, so don't worry if it is confusing at first. Note: We recommend turning off your iPhone's auto-lock feature, if enabled, while testing with VoiceOver. If your phone locks while in VoiceOver mode, it will stay in VoiceOver mode, and you will need to use the VoiceOver controls to unlock your phone. You can use a slow swiping up motion to open the passcode field. Click a button to select it, and then double tap to press the button and enter the value. Repeat until you've entered your full passcode. There are two things you should practice repeatedly when getting started with VoiceOver on iOS: 1. Tap on something once to select it, and then — after it is selected — double tap to use it. This is how you will open apps, click buttons and perform other interactions. Try this with the VoiceOver on/off toggle in your accessibility settings to get used to it. 2. To go to your device's home screen, slowly slide one finger up your phone screen — starting at the bottom — until you feel a vibration, and then immediately lift your finger off the screen. Test these two controls together. Turn VoiceOver on, navigate to your home screen, and then re-open the settings app. Navigate to the VoiceOver setting and turn VoiceOver off. Repeat the process for more practice, and then proceed to learn additional controls below. Basic iOS controls Refer to Apple's documentation on iOS VoiceOver controls for more details and additional controls. - Single tap on an element: Select that element. VoiceOver will read it aloud, and it will remain selected. - Double tap: Activate the selected element. Try this with the VoiceOver on/off toggle in your accessibility settings to get used to it. - Swipe up/down with two fingers: Read all content on the current page from top to bottom - Swipe up with three fingers: Scroll down the page - Swipe down with three fingers: Scroll up the page - Swipe right/left: Navigate to next/previous page element (just like you would do with arrow keys on MacOS) Again, these are not all the available controls. This is a beginner's guide.{\" \"} Using the VoiceOver rotor VoiceOver users do not have to listen to each element on the page from top to bottom. They can jump around to different links, headings and other page elements using something called the rotor. On desktop Open the rotor using VO + U. (As mentioned in the MacOS controls section above, the default VO key is caps lock or option + control.) You can use the left and right arrow keys to filter by different types of elements. Use the up and down arrows to select a specific element, and press enter to jump to it. On mobile Open the rotor by holding two fingers on the screen and rotating them clockwise — while maintaining pressure on the screen — like you are using a screwdriver. Maintain the motion described above until the desired setting is selected. At that point you can swipe up or down the screen to enable the setting. Refer to Apple's documentation on the iOS VoiceOver rotor for more details. --- NVDA (Windows) VoiceOver is only available on Apple devices. Users on Windows have access to different screen readers, though. One of the most common (and free-to-use) screen readers is NVDA. The NVDA code is open source. Testing with NVDA on a Mac is tricky. Deque University offers guidance on possible configurations. --- Talkback (Android) The Talkback screen reader is built into Android devices. Our mobile apps team develops an Android version of The Washington Post mobile app, and they help with Talkback testing. --- Other screen readers There are other screen readers like JAWS — a paid-only screen reader for Windows and MacOS — and Narrator, a free screen reader that comes built-in with Windows. Testing with these screen readers is encouraged, when possible, but we at The Post are focused on testing with VoiceOver, NVDA and Talkback.",
    "url": "/resources/accessibility/screen-readers",
    "path": "resources/accessibility/screen-readers.mdx"
  },
  {
    "title": "Semantic HTML and ARIA",
    "description": "Heading order, tables, labels and screen reader support",
    "kicker": "Accessibility",
    "content": "--- Heading order and page landmarks Heading order motivation Someone who is using a screen reader may jump around the headings on a page to quickly scan content. Headings have a hierarchy: A page should have only one h1 corresponding to its title, and h2s are used for major subsections, h3s are for subsections of h2s and so on. If headings are used our of order, such as an h2 being placed below an h3 despite the h2 content being a subsection of h3, then the user may be confused. Skipping heading levels entirely, such as going from an h2 to an h4, can also cause issues. It may be tempting to use headings out of order based on their styles, but this should not be done. You can add a class to a heading to provide extra styles, or rework your heading styles entirely because they may not make sense in the first place if you are being tempted to use headings out of order. Heading order solution There must be only one h1 on any given page, as this corresponds to the page title or headline. After that, the heading level represents the \"scope\" of the subsection. For instance, if you are working with an election results page showing the results of Democratic and Republican primaries in the state of Missouri, it would make sense to have the title of an individual office seat (such as governor) be an h2, while the Democratic and Republican primaries for that seat are each headed with an h3. Page landmarks Our Washington Post article pages contain landmarks that screen reader users can quickly access via the rotor to jump around a page and hear different types of content. We use the following landmarks as documented by W3C: main, nav, aside, header and footer. We also use the article landmark defined by MDN to denote self-contained content such as an article or user-submitted comment. In addition to the above, we can use form and section tags to define other key regions on a page, but we need to include an aria-labelledby, aria-label or title attribute on these elements so screen readers know what they contain. Similarly, if the same type of landmark is used on a page multiple times (for example, two navs or two asides), then we should add an aria-label to each duplicate landmark to differentiate them. Inspect one of our articles with the Chrome developer tools to find the landmarks. You can also open a screen reader rotor to view a list of landmarks. The example code below demonstrates one way we can arrange landmarks on article pages. There are other possible arrangements. Your main focus in using the landmarks should be that they contain appropriate content. Otherwise screen reader users may be confused. --- Labeling interactive elements Our docs address the need for alt text when a reader cannot see an image. The aria-label and aria-labelledby conventions are for interactive elements that are not images. See the ARIA guide for more context. aria-label You might use aria-label on a clickable div on a page to clarify for the user its purpose: Notice that the aria-label attribute is passed a string value to be read by a screen reader. An aria-label can also be useful when you want to have two versions of the same text shown. For instance, in many tables on our live elections results pages we include abbreviations of certain words, such as \"Unc.\" for \"Uncontested,\" \"Pct.\" for \"Percent,\" etc. We can use aria-label to write text that is only seen by screen readers, while the standard component text remains seen by non-screen-reader users. aria-labelledby You might use aria-labelledby to clarify for a screen reader the connection between an input field and its purpose: Note that the aria-labelledby is passed a string containing an element id or multiple ids separated by spaces. The text content of the elements with these ids is what will be read by the screen reader so that the user understands what each input field is for (in this case, \"Billing Name\" and \"Billing Address\"). There is also an aria-describedby property meant to connect elements with relevant (but not essential information). This is not used as commonly, and aria-labelledby should be used regardless of whether a value for aria-describedby is also present on a given element. --- Hyperlink text guidelines It is important that hyperlink text is meaningful even out of context. This is because many screen reader users jump between links on a page without hearing the text surrounding each one. Read our screen reader guide for more info. There are some key things to watch for when writing link text: - Avoid using the URL as the link text. - URLs are often read by screen readers in a disjointed manner, and they can also be confusing and less meaningful for sighted users. - Keep link text concise, but don't sacrifice meaning. This speeds up the process of scanning links as a user, especially as a screen reader user. - For example, \"Subscribe\" is better than \"Subscribe for more content from us in the future.\" - Don't include words like \"link\" or \"click here\" in your link text. - This is redundant. Links should be evident in their styling and structure. If you feel the need to specify \"click here,\" then your link probably isn't styled correctly for keyboard accessibility. - Ensure each unique link has unique link text. - If multiple links have different text but the same value, then users may waste their time clicking them all. This is a frustrating user experience. - Similarly, if multiple links have the same text but go to different sites, then users may miss out because they assumed the links were the same. --- Hiding content from screen readers There are often ads on our products. When third-party ads are used, we don't have full control over their accessibility. For screen reader users, inaccessible ads hinder page navigation. Our practice is to apply aria-hidden=\"true\" on our ad wrapper elements so that they are ignored by screen readers and thus do not clutter the page. The guide to ARIA attributes has more context. We use aria-hidden=\"true\" on non-ad content if and only if it is useless to screen readers (it is purely decorative or it is innaccessible content that already has a screen reader accessible alternative elsewhere on the page). --- Content for screen readers only sr-only class Try searching \"sr-only\" on our Tachyons search page. You should find the following class: This is a best practice for adding elements to a page that we want available only to screen reader users. For instance, we might have a table on a page and want a caption describing that table for screen readers without taking up space on the visible page layout. You can add that caption to the table in the HTML and apply the sr-only class to ensure the text is available to screen readers but not visible. A link with the sr-only class applied will stay hidden to sighted users at all times, evem when it receives keyboard focus. This can cause confusion when sighted users navigate a page with keyboard controls. For this reason, sr-only is generally not appropriate when working with interactive elements like links, buttons, etc. Use Visually Hidden (below) instead. Visually Hidden component See our Visually Hidden component docs for more information. It functions similarly to sr-only, but they are not quite the same. For example, a Visually Hidden link will appear to sighted users when in focus. On the other hand, a link with the sr-only class applied will stay hidden to sighted users at all times. For this reason, sr-only is generally not appropriate when working with interactive elements like links, buttons, etc. Use Visually Hidden instead. --- Non-English language support Content in non-English languages, such as Arabic or Spanish, must have the lang=\"CODE\" attribute set, where CODE is the language code such as “ar” for Arabic or “es” for Spanish. There’s a list of language codes. Additionally, Arabic and some other languages are read right-to-left. This means we need to set an additional attribute in the HTML for Arabic text. Add dir=\"rtl to the DOM elements with lang=\"ar\". Below is an example of how this looks: It is very important that this is done correctly. A screen reader user may not hear content in non-English languages correctly if it is not tagged correctly. For example, if Arabic is not tagged correctly, then it is not read by the built-in MacOS & iOS screen reader VoiceOver. Instead, each character is read individually: “Arabic character X, Arabic Character Y,” etc. VoiceOver also includes different voices that pronounce the words from different languages. If lang is not set on non-English text, then VoiceOver will not use the correct voice. --- Tables W3C provides more guidance for making tables more accessible to screen readers. The caption tag The caption tag is an important component of tables that is used by screen readers to provide an overview of a table when it is first reached. If we don't want the caption to be shown on the visible page (in some cases, we might), then we can hide it using the sr-only className. The thead tag For a table with only column headers, the thead tag contains the headers for each column. Even though the tag is called thead, the header elements must still be th tags, not td tags, in order for the screen reader to read the contents of the table correctly. This is because screen readers read the header of the column for every cell within that column as a reminder to the reader of what is being read aloud. For instance, if our table contains vote totals and we have: Then the screen reader will only read the headings once, at the top of the table, and the listener has to remember the order of (1) Biden, (2) Sanders and (3) Warren for the rest of their time reading the table, as they will only be read a bunch of state names and numbers sequentially. On the contrary, if we have: Then the screen reader user will hear \"Votes for Warren - 3,000\" when they get to the last cell in the table. This makes for a much more user-friendly experience, and this is why we should always make sure to use the th tag in our thead elements. --- Alerting screen readers of live updates aria-live is an attribute used to notify people using screen readers of dynamic changes in the content of a live region of a page. See the ARIA documentation on aria-live for more details. While this attribute can serve a purpose in terms of accessibility, it should be used extremely cautiously. For instance, a screen reader user may be bothered repeatedly if aria-live is applied for something like new comments on an article. We almost always want to use aria-live=\"polite\" when we do use aria-live. This makes it so that updates do not interrupt the screen reader user and instead waits til they idle.",
    "url": "/resources/accessibility/semantic-html",
    "path": "resources/accessibility/semantic-html.mdx"
  },
  {
    "title": "Text size, fonts and zoom settings",
    "description": "Choosing fonts and ensuring they are responsive",
    "kicker": "Accessibility",
    "content": "Text size Choosing font sizes Do not use font sizes below 12px. Generally, body font sizes should be at least 14px or 16px. Important text should be in larger fonts than supplementary text. Our WPDS Foundations font sizes start at 12px. Scaling Font size should scale automatically per the user's browser settings. You can test this by accessing your browser settings and updating the font size, as shown below in Google Chrome. The process and options may vary between browsers and operating systems. Do your research for each situation you are testing. Ensure after changing the font size that the fonts on your content scale automatically. We should meet our users where they are as much as possible, and that means responding to their settings. --- Page zoom Content on our pages should remain readable when a user increases their font size or enlarges text using zoom. Many users also have zoom settings configured in their browser (e.g. zoom defaults to 150% on each new page the user opens). WCAG sets 200% as the minimum zoom level below which all content on a page should remain readable. Zoom in using command + (Mac) or control + (Windows). You should be able to see the current zoom level momentarily, as shown below. You'll want to watch for issues like overlapping text, text spilling out of containers, etc. that hinder readability as zoom level increases. To fix such issues, ensure you are building components that resize dynamically. The below screenshot is from our homepage. We can see that it resizes into a one-column format to accomodate the high zoom level of 200%. --- Font selection Avoid using complicated fonts that present words in unfamiliar or elaborate ways, such as in cursive or cartoon-ish styling. These can be difficult to read. Additionally, writing in all caps or with irregular capitalization can make text harder to read, especially for screen reader users who may hear text read incorrectly do to irregular capitalization. Our WPDS Foundations fonts are good examples of legible fonts. When using a non-WPDS font, consider the above to ensure it is accessible to users. There is not a consensus as to whether serif or san-serif fonts are more readable in general. We at The Post use both.",
    "url": "/resources/accessibility/text-size-and-zoom",
    "path": "resources/accessibility/text-size-and-zoom.mdx"
  },
  {
    "title": "Coding a page",
    "description": "A step-by-step guide to making a page using Next.js and UI Kit.",
    "kicker": "Guides",
    "content": "--- Intro We are going to develop the UI for a landing page for a new product, called \"Recipe Search\". It will be a search page for recipes. The user will be able to search for recipes by name, ingredients, or cooking method. The results will be displayed in a list. The user will be able to click on a recipe to see the full recipe. The user will be able to click on the \"Add to Favorites\" button to add the recipe to their favorites. We are going to try to follow this Dribbble https://dribbble.com/shots/13671297-Recipes and have the ability to showcase the beautiful photography from our photojournalists. The source code for this guide is available on The Washington Post GitHub github.com/washingtonpost/wpds-coding-a-page-guide. Prerequisites This guide assumes you have a Next.js project set up and have completed the React Guide. Takeaways You will finish this tutorial with a strong opinion from us on how to best develop a page using the UI Kit. We will discuss the following: - Page Layout - UI Component Organization - Component Variants Page Layout We are going to have two layouts one for smaller screens and one for larger screens. Luckily, today we have CSS Grid & Flex Box. We will be using these to create our layouts. On small screens, the recipe when opened will display on top of the search results. On larger screens, the recipe will be displayed to the right of the search results, the search results will be displayed to the left of the recipe in 4 columns. Container WPDS ships with a responsive Container component that centers its content and resizes based on window width. It has four sizes based on UI Kit's internal breakpoints. For small and medium breakpoints the container's width is 100%, large is 900px, extra large and extra extra large is 1024px, and above extra large is 1440px. In the initial stage of developing the layout, we'll use the stitches styled function that ships with UI Kit to make the container easier to visualize. Structural Elements By default, Container is set to display flex with a direction of column. Our layout adds two children. A Header component contains elements that span the width of the page and an OverviewDetail component contains the grid of recipe photos and the selected recipe's details. StyledContainer un-sets alignItems to allow its child elements to have a 100% width. It also sets a flex property of 1 on OverviewDetail using an nth-child selector to allow it to expand and fill any vertical space not occupied by the Header. Using a child selector keeps OverviewDetail separated from the concern of how it is layed out in its parent. The OverviewDetail has its display property set to flex to layout its child elements in a row. The Overview element also uses flex: 1 to expand and fill the main portion of OverviewDetail's flex row. Finally, the Detail element starts in its large screens layout, using flex's two value syntax to set its width to 25%. Adding Responsiveness In the proposed layout Details responds to screen size changes and will display as an overlay on smaller screen sizes. We'll use a combination of variants and breakpoints in stitches to achieve this. Stitches supports responsive styles by allowing variants to be applied at different breakpoints. The UI Kit stitches config contains a media object with 5 breakpoints, sm, md, lg, xl, xxl as well as the inverses notSm, notMd, notLg, notXl. To selectively apply a style a prop with the parent variant name on the element is passed an object that contains keys of breakpoint names and values of child variant names. An initial variant can be set by using the @initial key. With this method, the Detail pane initially uses the \"column\" layout but at the small breakpoint switches to the \"overlay\" layout. Responsive Grid By using the same approach to responsiveness we can create a grid for recipes that switches between a two and a four column layout. CSS grid layout takes care of managing the display of the desired number of columns using the repeat function. Rows aren't templated and implicitly repeat with auto sizing. Show and Hide Details To complete a basic version of the required interactivity we'll add a selectedRecipe state that is set whenever a grid element is clicked. The detail pane is then conditionally rendered only after a recipe is selected. The close button clears the selectedRecipe removing the detail pane. Adding Data To keep this guide self-contained we will be working with a local data source, but the approach for interacting with an API will be similar in a production environment. To fetch data we use Next's recommended sibling helper library SWR and replace the previously empty recipes array with real data from the local api endpoint. The endpoint returns a JSON array of recipe objects with the following fields. Which can then be used to populate the grid and the details pane. Searching With the addition of a search input field, any user-entered text can be stored in state and used to update the API request. By passing a function to SWR it will make use of a dynamic value to re-fetch data on changes. In addition, a debounced value from a utility hook is used to ensure that the search text value does not change until the user has paused typing. UI Component Organization Up until this point all of our development has occurred in the index.js file. As we finalize the development of the page it's useful to abstract out each of these custom elements as stand-alone component files. Keeping our index file clear, performant, and focused on its primary responsibility of handling data and state. Next expects components to be located in a top-level folder. Let's move our elements to files in that folder and refactor out the temporary styles we used to visualize them. During refactoring, we'll favor flow relative logical properties to handle any possible direction or orientation changes. Then we'll add a couple of additional components to properly display the recipes. Styled Element Wrappers Header PageHeading ResponsiveGrid The Header, PageHeading, and ResponsiveGrid components end up as simple wrappers around their styled elements. All the components favor named exports over default exports. The ResponsiveGrid also exports a ResponsiveGridItem. These components have an explicit parent-child relationship so they share the same file. OverviewDetail OverviewDetail has some additional responsibilities in the Detail component. If no children are passed it won't render, facilitating its show hide functionality. It also now contains a conditionally rendered divider that is hidden when it displays as an overlay. Recipe Components Recipe Card The RecipeCard contains an image, title, and favorite toggle button. It uses css grid and the UI Kit spacing constants to arrange these elements. With both the card as well as the favorites toggle being clickable it's necessary to include an invisible button as a sibling for both elements to remain interactive and accessible. Finally, a local storage hook is used to store any clicked favorites and persist them between visits. Recipe the Recipe component is a straightforward display of the recipe's image and text content broken out by type. A small bit of logic is used for parsing ingredients into a list. Final Page Bonus: Adding Animation To animate the transition of the Detail pane we'll leverage a react-transition-group CSSTransition The CSSTransition takes care of the conditional rendering by using the mountOnEnter and unmountOnExit flags. Since the root application determines if a Recipe is being rendered a copy of that element is kept and rendered to show while the exit transition is happening. The standard class naming pattern from react-transition-group is used to apply a fade-in and out any time the Details component is shown and hidden, while a slide-in is used on the larger side column layout. The & sign is used to chain the react-transition-group class names in stitches and apply the rules for the transitions",
    "url": "/resources/guides/coding-a-page",
    "path": "resources/guides/coding-a-page.mdx"
  },
  {
    "title": "Contribute a Component",
    "description": "This document describes the process of contributing a component to our system. We are always excited when our community looks to expand our design system. Thank you for taking the time to contribute.",
    "kicker": "Guides",
    "content": "Note: When contributing a component the process takes time, and a quick turnaround is in contrast to the amount of testing and approval that each component requires. WPDS components follow a strict contribution process to minimize breaking changes or bugs. --- Getting started Read our principles Before designing and developing the components of your dreams, please read over our principles. Reading our principles will help frame the entire process before any design or development occurs. After reading our principles please submit your component idea to using our support channels. --- Design All components follow a design process and approval process before any development starts. We have generated a Figma template file that you can reference as a designer to ensure all areas are covered when designing a new component or making refinements. It has a required checklist for each phase. The high-level process is as follows: Phase 1: Audit 1. Audit our current website: Look at our site for similar patterns related to your present component. If you find a pattern on the site that matches this component document with screenshots, annotate behaviors and variants. It may be the case we do not have this component, and if that is the case, note it in your designs. 2. Audit the web: Visit popular sites and document patterns, behaviors, and variants. The chances are that these popular sites will help inform expected visual and interaction patterns users come to expect from a component. 3. Audit other design systems: It is always best practice to audit other design systems as patterns at a component level is shared between systems. It is best to understand why that pattern, style, or behavior fits that specific product. 4. Audit our design system: Last but not least, audit our own system. Often, we tend to think about visual patterns in isolation, but a design system is a series of interconnected patterns shared across many components. Document the similar patterns, behaviors, or variants of our existing components. Phase 2: Concept 1. Distill the audit findings: Distill the audit findings into actionable insights. These insights should result in a clear direction on conceptual exploration. 2. Think in WPDS: When designing the component, please think holistically and not for one specific use case. It may require getting in touch base with other designers, product managers, and engineers to understand what this component is trying to resolve. 3. Design in context and out of context: One of the pitfalls when designing a component is that we tend to design in isolation, resulting in a poorly tested component. However, designing for a single context also results in a hyper-specialized component, resulting in a very unflexible component. 4. Use our system: When starting your concepts start with our system. All of our components must utilize our tokens. That means to avoid creating new tokens to fit the concept. Exhaust our system before making new tokens within a new component. Phase 3: Decide 1. Options: When thinking about component options, consider future use cases and current ones. Don’t feel a need to have multiple options. Some components have only one option, and that is okay. 2. Behaviors: Documenting behaviors include defining states, overflow behavior, responsive behavior, and conditional behavior. You want to make sure your component is flexible and ready to be tested. 3. Guidance: Create clear guidance on the component for others to reference when using it. The direction will help avoid component misuse. 4. Accessibility: All of our components must meet the minimum accessibility requirements for the site laid out by WCAG for AA standards. Please review your component based on those standards. They differ from component to component. 5. Specs: Define the specs using our tokens. Be clear in a fixed size, positioning of elements when scaled, and any other requirements. Phase 4: Deliver 1. Submit: At the end of the design process comes the submission. At this stage, you have already completed what has outlined above, completed the required checklist in the Figma template, and have received approval from all the parties necessary (Design leadership, WPDS, and other Stakeholders). Next, submissions move to our backlog awaiting development for an engineer to contribute or to be contributed by WPDS team. --- Code All components must follow a predefined design spec. Without a design spec, development cannot occur. If you are interested in a component not in our backlog, please reach out. Core Tenets When developing a component, use these core tenets for component design: 1. They should be controlled by their API or left uncontrolled. 2. If a component has multiple DOM nodes such as an Accordion's trigger and its display it should be split into multiple components, such as AccordionTrigger and AccordionDisplay, and use a provider component to manage the state across the two (e.g. AccordionRoot). 3. We should avoid using any DOM APIs that are not supported by evergreen browsers. 4. We should allow modification of styles via the css prop using our tokens (locally and globally scoped components and theme). 5. We should use our theme tokens to style our components. Ready to Code 1. Check our Jira backlog to make sure that your component is not currently being worked on and check the component section on the docs site double check that it does not already exists. Reach out to the WPDS team on slack if you have any questions. 2. Components live in the wpds-ui-kit. Make sure you can spin up the local dev environment. If you are running into any issues, double check that the node version matches that on the .nvmrc file and that you're using npm v8.3. See WPDS-ui contribution doc for more information. 3. We use conventional commits for every commit. We don't squash our commits from our PR into one before merging to main. We like to keep our git history clean. For example, feat: add new component and stories or fix: update props. 4. On the command line run the new-component scaffolding script npm run new-component to get things started. This command will create a component directory for you that includes an index.ts file, a play.stories.jsx, and a .tsx file. 5. Add all of your component's logic in the .tsx file. Remember, you should split up complex components into multiple files. We have a list of props we use to make sure we stay consistent. If you need a prop that doesn't fit into one of these, feel free to add your own. Don't forget to document it! 6. Add a storybook example with interactive props so that it's easy for others to see how your component works. If there are multiple variants of your compoment, please add some headers to distinguish them. This should also make it easy to see the different states your component has (what happens on hover, on click, etc.). 7. Add your component to the server side testing page app/pages/index.tsx. This page helps us catch possible server side render issues with all of our compoments. 8. Make a PR and include @WPDS for review. Feel free to add your teammates as well so they can see how easy it is to contribute to WPDS! Once your PR is approved, it's documentation time. 9. All component documentation lives in wpds-ui-kit/build.washingtonpost.com. As the main contributor, you are responsible for documenting your new component. Together with your designer, come up with and document some content, assets, best practices, and any other helpful things someone consuming your component needs. Don't forget to document implementation details and code specific things in the component's README. 10. All components have a Zeplin code snippet available to all who use Zeplin. As the main contributor, you are responsible for connecting your component to Zeplin and creating a code snippet. Follow the steps in Connecting to Zeplin to get your component synced up to Zeplin. Note: in order for this to work, design needs to have added your component to the styleguide. 11. Congratulations, your component is now ready to ship 🎉. Review the release documentation and latest releases to see how we release components. New components are released on a monthly basis. 12. Now that your work is live, others can start to use it! Please note that you are expected to commit to two weeks of support and triage. Please review the support process.",
    "url": "/resources/guides/contribute-a-component",
    "path": "resources/guides/contribute-a-component.mdx"
  },
  {
    "title": "Creating Custom Icons",
    "description": "How to use our Icon component with your own SVGs to create a custom Icon.",
    "kicker": "Guides",
    "content": "--- Intro There may be some instances where your team needs to use an icon with an asset that does not currently exist in WAM. While we aim to help as much as we can, other commitments could mean that we are unable to add an icon to WAM within your timeframe. It is also possible that you need an icon for a domain specific use case and it does not make sense to add this asset to the system. For both of these instances, a custom icon might be what you need. Prerequisites This guide assumes that you are working with ReactJS and are using the WPDS Icon Component. --- Design 1. Double-check: Please make sure that the icon you are looking to use doesn't currently exist in WPDS. You can check Figma or go to the Icon Assets Page in our docs site to look through what assets we currently make available. 2. Follow contribution guidelines: When creating your icon, please follow the contribution guidelines outlined in the Making an Icon section of our docs 3. Export as SVG: Please ensure that your new icon is a SVG. In WPDS, all icons are 16x16 pixels. --- Code 1. Add svg to repo and make it a React Component: Add the svg file to your repo and make it a React Component. There are a couple of different ways you can do this. - If you are going to be using a lot of SVGs in your repo, then you might consider using something like @svgr/webpack and setting up your webpack configs to convert your SVGs to React Components for you automatically. - You can use an online conversion tool such as SVGR Playground to convert your SVG into a React Component. You can then simply copy and paste that new component into your code. - You can cast your SVG into a React Component from your import statement. This might be an okay solution if you are going to be using this icon less than a handful of times. Otherwise, you might want to consider using one of the first two options. 2. Pass SVG into the Icon component: Once you have your SVGs available to you as React Components, you can now pass them into the WPDS Icon component like you would a WPDS icon. They will behave the same.",
    "url": "/resources/guides/creating-custom-icons",
    "path": "resources/guides/creating-custom-icons.mdx"
  },
  {
    "title": "Emoji Guide",
    "description": "Use these guidelines to help make decisions about emojis in product and marketing contexts. (Newsroom follows its own style guide.)",
    "kicker": "Guides",
    "content": "When to use If you're using emojis, they should ideally meet all the following criteria: - Used as an enhancement (but not in place of words) - Used sparingly - Used when the overall tone of the experience is light Emojis chosen should also be light in tone (i.e. confetti is OK; tombstones for a Halloween email, not so much) - Used when there's no chance of the emojis appearing juxtaposed with grim, serious articles For example, Microsoft doesn't have flag emojis. Check to make sure your emojis convey what you're intending. How to use If you use emojis: - Use widely recognized emojis that translate well across devices. For example, Microsoft doesn't have flag emojis. Check to make sure your emojis convey what you're intending. - Make sure the emoji has enough contrast for both light and dark modes. - Place them at the beginning or end of sentences, not in the middle. - Use within text (as opposed to an image or any other format). This is required by Apple's guidelines. - Make sure related copy stands on its own — emojis should be able to be deleted without affecting the meaning. When to avoid Avoid using emojis: - To represent our core product offerings. If we need art to represent core product offerings, we should evaluate if the use case warrants creating custom art. - If there's any chance of the emojis appearing juxtaposed with grim, serious stories.",
    "url": "/resources/guides/emoji-guide",
    "path": "resources/guides/emoji-guide.mdx"
  },
  {
    "title": "Figma Guide",
    "description": "Figma is our tool of choice when designing and using our design system. Other design software is currently not supported, but maybe in the future.",
    "kicker": "Guides",
    "content": "--- Getting started Requesting access If you are a Washington Post employee, please submit a SAR to gain access to your Figma Product & Design workspace. If you are not a post employee and are looking to use WPDS Ui Kit, please reference these Figma files. WPDS Ui Kit & WPDS Asset Manager. Prerequisite Before jumping into Figma and using our design system, you must first understand the concepts around our system. The Figma library is built and designed to parallel what is happening in the code. Please read over the following before proceeding with this guide. 1. Color 2. Tokens - color, radius, shadow, size, typoggraphy, z-index 3. Asset --- Using components Enabling our Figma libraries When using our Figma library, it is essential not to detach as this will give you the optimal experience when handing off designs to a developer. Component variants All of our components match the coded API (properties of the variants) as close as possible. Slots Some of our components use a concept called slots. Slots are for you to replace with your component or nest another component. To replace, select the slot in the layer and replace it with the desired component. You can build out a design that does not need to be detached by replacing slots. Icons If an icon layer of a component is locked, this indicates that you should not change the icon. Otherwise, you may modify the icon glyph using any icon available in our Asset Manager. Use Figma variant controls Only use the Figma variant controls when modifying the Figma component to apply the desired variant. These controls closely match to the coded component and inform the developer on what property value to assign. Avoid manually overriding the properties by selecting the layers. --- Using our tokens Applying tokens In Figma, we have two tokens managed by the native Figma UI. The shadow and color tokens can be accessed by selecting the style icon. All other tokens are handled either through our token tools or manually. Applying color Select the style icon and apply the fill or stroke color to apply a color token in Figma. When selecting a color style, all tokens are displayed; a helpful way of picking the right colors is to use our theme alias to assign color with intention. Applying shadows To apply shadows to an element, select the effects in the design panel and apply one of the shadow tokens. Applying other tokens We developed a plugin to manage and assign tokens in Figma that are currently not supported or flexible enough to be used in design without detaching the style. Our plugin resolves this by connecting our tokens while still being flexible in Figma. Installing Token Tools To install the plugin, visit the plugin landing page and install. You will now have access to the plugin in your Figma file. If you do not see the plugin, please reload the file. Token tools Token Tools is a plugin that we will iterate and expand on as our needs grow with the system. The interface design mimics Figma UI to avoid learning new interaction patterns. Theme The theme tool in token tools applies the matching color for that theme switching it from its current context to the following context. Border radius Using the border radius tool will apply the border radius token to any frame or shape that has a uniform border radius. Font size & Line height The font size and line height tool will apply the token to the selected text element. Font weight & Font Family Currently, token tools do not manage font family or font weight. However, in the WPDS Zeplin extension, the extension will note the tokens. For more information, please refer to our tokens documentation to apply the correct value in Figma. Read next our Zeplin guide >",
    "url": "/resources/guides/figma-guide",
    "path": "resources/guides/figma-guide.mdx"
  },
  {
    "title": "Migrating to our new palette",
    "description": "This guide will help you understand the evolution of our color palette. It will also help you if you are using our v1 tokens or even using our v0 tokens to migrate to use our latest unified palette! So let's jump right in!",
    "kicker": "Guides",
    "content": "Getting started Note: If you are not upgrading to our Q2 2022 color tokens this guide is not for you and you can review our{\" \"} color tokens . Before getting started and reviewing all of our new beautiful colors, we need to spend some time reflecting on just where we are coming from and by that I mean we need to look at our old colors. Long ago before we were even where we are today, our colors used a naming convention based on their perceived lightness against a white background. While that may have worked at one time, we have long since outgrown this naming convention. --- The problem & resolution The old way of naming our color tokens presented issues for us to scale as a system. The main issues were the following: 1. Inconsistent terminology -- The first problem with the way we were naming our tokens was that it was not consistent across color families. What was lightest in one color scale, was pale in another. 2. Limited color scales -- The second problem was our inability to grow our color scales. For example how might we add a color between gray-light and gray-lighter (gray-semi-light?). In our new palette there was a need for more colors in each family and this forced us to take a more scalable approach. 3. Confusing when going from light to dark contexts -- Lastly there is the problem of generating token names based on perceived lightness. In our previous system of color tokens, all perceived lightness was measured against a white background. The problem becomes when we change that background to a dark context, the visual relationship between light and dark is inverted, which is not reflected in the token name. As we want our colors to be adaptive using the same contrast across different contexts, percieved lightness was not a viable approach. The resolution To resolve many of the issues outlined above we have changed our naming convention to use numbers instead of perceived lightness. This has unlocked the ability for our color tokens to flex according to the context, scale to support more colors in a family and avoid inconsistencies across color families. --- Phase 1: Translation If you are an early adopter of our new design system, you have already been using our new color token naming convention. This phase is referred to as a \"translation\" because our color tokens did not disrupt or add any new colors to our legacy system. We simply translated the previous tokens to a normalized color scale. This provides the runway to begin to scale our color scales accordingly, while having minimum impact when we integrate into our unified palette. Old convention → New convention Note: all other Subs colors were deprecated in this translation as there was uncertainty on which colors would remain after the final color consolidation of our new palette of phase 2. | Old convention | New convention | | ------------------ | ------------------ | | black | gray0 | | off-black | gray20 | | gray-darkest | gray40 | | gray-darker | gray60 | | gray-dark | gray80 | | gray | gray100 | | gray-light | gray200 | | gray-lighter | gray300 | | gray-lightest | gray400 | | offwhite | gray500 | | white | gray600 | | blue-dark | blue80 | | blue | blue100 | | blue-bright | blue200 | | blue-pale | blue300 | | red-dark | red80 | | red | red100 | | red-bright | red200 | | red-pale | red300 | | orange-dark | orange80 | | orange | orange100 | | orange-bright | orange200 | | orange-pale | orange300 | | green-dark | green80 | | green | green100 | | green-bright | green200 | | green-pale | green300 | | gold-dark | gold80 | | gold | gold100 | | gold-bright | gold200 | | gold-pale | gold300 | | subs-blue-dark | vividblue80 | | subs-blue | vividblue100 | | subs-blue-bright | vividblue200 | | subs-blue-pale | vividblue300 | --- Phase 2: Growth & Adoption (Final Phase) The introduction of one unfied system of color tokens represents the evolution of our color palette across the organization. This palette was contributed to by a collection of individuals from many different departments. Our main goal with this palette is to bring together our vast spectrum of colors and eliminate arbitrary deviations that we encountered throughout our product at large. Which colors changed in phase 2? Grayscale tokens The grayscale now ranges from 0 to 700 | Token | Notes | | ------- | ---------------------------------- | | gray0 | no change to value | | gray20 | no change to value | | gray40 | no change to value | | gray60 | new color value | | gray80 | no change to value | | gray100 | new color value | | gray200 | new color value: equivalent to gray100 in phase 1 | | gray300 | new color value: equivalent to gray200 in phase 1 | | gray400 | new color value: equivalent to gray300 in phase 1 | | gray500 | new color value: equivalent to gray400 in phase 1 | | gray600 | new color value: equivalent to gray500 in phase 1 | | gray700 | new color value: equivalent to gray600 in phase 1 | Vivid blue Note: vividblue is no longer a supported token. All of the vividblues have been merged into one family of blue. Please review the blue tokens to map to the desired blue value. Blue All colors for blue have changed in value and now support a scale from 40 to 600: | Token | Notes | | ------- | ------------------------------------------------------ | | blue40 | new token added | | blue60 | new token added | | blue80 | change to value | | blue100 | change to value: equivalent to vividblue100 in phase 1 | | blue200 | change to value | | blue300 | change to value | | blue400 | new token added | | blue500 | new token added | | blue600 | new token added: equivalent to vividblue300 in phase 1 | Red All colors for red have changed in value and now support a scale from 40 to 600: | Token | Notes | | ------ | ------------------------------------------------ | | red40 | new token added | | red60 | new token added | | red80 | change to value | | red100 | no change to value | | red200 | change to value | | red300 | change to value | | red400 | new token added | | red500 | new token added | | red600 | new token added: equivalent to red300 in phase 1 | Green All colors for green have changed in value and now support a scale from 40 to 600: | Token | Notes | | -------- | -------------------------------------------------- | | green40 | new token added | | green60 | new token added | | green80 | change to value | | green100 | no change to value | | green200 | change to value | | green300 | change to value | | green400 | new token added | | green500 | new token added | | green600 | new token added: equivalent to green300 in phase 1 | Gold All colors for gold have changed in value and now support a scale from 40 to 600: | Token | Notes | | ------- | -------------------------------------------------------- | | gold40 | new token added: equivalent to gold80 before the change | | gold60 | new token added: equivalent to gold100 before the change | | gold80 | change to value: equivalent to gold200 before the change | | gold100 | change to value | | gold200 | change to value | | gold300 | change to value | | gold400 | new token added | | gold500 | new token added | | gold600 | new token added: equivalent to gold300 in phase 1 | Orange All colors for orange have changed in value and now support a scale from 40 to 600: | Token | Notes | | --------- | --------------------------------------------------- | | orange40 | new token added | | orange60 | new token added | | orange80 | change to value | | orange100 | no change to value | | orange200 | change to value | | orange300 | change to value | | orange400 | new token added | | orange500 | new token added | | orange600 | new token added: equivalent to orange300 in phase 1 | Please see our Color tokens to see all of our tokens",
    "url": "/resources/guides/migrating-to-our-new-palette",
    "path": "resources/guides/migrating-to-our-new-palette.mdx"
  },
  {
    "title": "Web Performance and SEO Best Practices and Guidelines",
    "description": "Proven strategies and guidelines for optimizing web performance and search engine optimization (SEO)",
    "kicker": "Guides",
    "content": "--- Introduction Web performance and SEO are crucial aspects of a website's success. Both contribute significantly to the overall user experience, user engagement, and the website's visibility in search engines. Web performance refers to the speed and efficiency with which a website loads and operates. A website with good performance ensures a smooth and enjoyable user experience. The importance of web performance lies in the following aspects: - User Experience: Fast-loading websites provide a better user experience, which is essential for keeping users engaged and encouraging them to explore content. - Conversion Rates: A website that loads quickly and functions efficiently can lead to higher conversion rates, as users are more likely to complete desired actions (e.g., making a purchase, signing up for a newsletter). - Mobile Users: With the increasing use of mobile devices, it's crucial to ensure that a website performs well on various devices and network conditions. A well-performing site caters to a broader audience and ensures a positive experience for mobile users. - Search Ranking: Google and other search engines consider web performance as a ranking factor. Faster websites are more likely to rank higher in search results, leading to increased visibility and organic traffic. SEO is the process of optimizing a website to improve its visibility in search engine result pages (SERPs). The importance of SEO can be summarized in the following points: - Organic Traffic: Effective SEO helps increase the website's visibility in search engines, leading to more organic traffic. Organic traffic is valuable because it is targeted and often has higher conversion rates than paid traffic. - Credibility and Trust: Websites that rank higher in search results are often perceived as more credible and trustworthy by users. Good SEO practices can help improve a website's reputation and authority. - Cost-Effective Marketing: SEO is a cost-effective marketing strategy compared to paid advertising. Once your website ranks high in search results, you can enjoy a continuous stream of organic traffic without incurring additional costs. - Competitive Advantage: By optimizing a website for search engines, it gains a competitive edge over competitors with less effective SEO strategies. Web performance and SEO are vital for providing a positive user experience, increasing website visibility, driving organic traffic, and ultimately, improving a website's overall success. By focusing on these aspects, you can create a strong foundation for a website's growth and long-term success. --- Web Performance Loading performance - Optimize images by compressing them, using responsive images for different screen sizes, and implementing lazy loading to defer the loading of off-screen images until they are needed. - Minify and compress CSS, JavaScript, and HTML files to reduce their size and improve load times. - Use Content Delivery Networks (CDNs) to distribute static assets across a network of servers, reducing latency and improving load times for users around the world. Rendering performance - Optimize the critical rendering path by minimizing the number of critical resources and prioritizing the loading of above-the-fold content. This helps ensure that users see content faster. - Use efficient CSS selectors to minimize browser work during the rendering process, and avoid layout thrashing by batching DOM updates and minimizing forced reflows. - Optimize JavaScript execution by deferring or asynchronously loading non-critical scripts, profiling and optimizing JavaScript performance, and using requestAnimationFrame for animations. Responsiveness - Design websites for various screen sizes and devices to ensure a consistent and enjoyable user experience across different contexts. - Implement responsive design techniques, such as fluid grids, flexible images, CSS Flexbox, and Grid Layout, to create adaptable layouts that adjust to different screen sizes and orientations. - While JavaScript can be used for certain aspects of responsive design, it's generally recommended to prioritize CSS for controlling the layout and visual presentation of the page at different viewport sizes. CSS-based solutions typically perform better, require less code, and can be managed within stylesheets, keeping the separation of concerns between style and functionality. - JavaScript should ideally be used for interactivity and enhancing the user experience, not for managing core layout changes wherever possible. In some complex scenarios, JavaScript might be required to achieve advanced responsive behaviors that CSS alone can't handle. In these cases, care should be taken to ensure performance and accessibility are not negatively impacted. --- SEO (Search Engine Optimization) On-page SEO - Use descriptive and concise title tags to accurately represent the content of each page, helping search engines understand its purpose and relevance. - Optimize meta tags for both users and search engines: - Write informative and unique meta description tags to give users a preview of the page content, improving click-through rates from search results. - Utilize meta lang tags to specify the language of the site's content for better search engine understanding and accessibility. - Implement Open Graph meta tags to enhance how the pages appear in social media shares, providing richer snippets that attract more engagement. - Use meta robots tags to guide search engines on what to do with the site's pages. For instance, you can instruct them not to index a page, or not to follow any links on a page. - Remember, each meta tag serves a distinct purpose, so ensure they are used appropriately and are relevant to the page's content. - Use header tags (H1, H2, H3) effectively to structure content and provide hierarchy, making it easier for search engines to understand the content's importance. - Optimize URL structures by making them readable, descriptive, and concise, helping both users and search engines understand the page's content. Content optimization - Write high-quality, unique, and engaging content to satisfy user intent and increase the likelihood of ranking higher in search results. - Use proper keyword targeting by including relevant keywords naturally within the content and avoiding keyword stuffing, which can harm rankings. - Optimize images by using descriptive alt text, relevant file names, and compressing images to reduce file sizes, improving page load times. Technical SEO - Improve site speed by optimizing page load times, as faster-loading pages are more likely to rank higher in search results. - Implement structured data (schema markup) using JSON-LD to provide additional context for search engines, potentially improving search result appearance and click-through rates. Here are some resources to delve deeper: - Understand how to structure data in JSON-LD format. You might use schemas such as NewsArticle, LiveBlogPosting, and more depending on the content (here is an example). Check the JSON-LD website and the Google's guide for further learning. - Always validate the schema markups for correctness. Use tools like the Google's Structured Data Testing Tool or Schema Validator to ensure the JSON-LD is error-free and up to standard. - Remember, a well-structured schema markup can enhance visibility in search engine results, improve click-through rates, and provide a better understanding of the page content to search engines. - Ensure crawlability and indexability by properly configuring robots.txt and creating XML sitemaps, helping search engines discover and index the site's content. - Use canonical tags to avoid duplicate content issues and signal to search engines which version of a page should be considered the original. - Implement HTTPS and secure the site to protect user data and improve trust with both users and search engines. Off-page SEO - Build high-quality and relevant backlinks from authoritative websites, as they serve as signals of the site's credibility and trustworthiness. - Utilize social media for content promotion, expanding the content's reach and potentially attracting more backlinks and organic traffic. - Consider guest posting and content outreach to build relationships with other websites and influencers, increasing the site's visibility and authority. --- Monitoring and Reporting - Use web performance monitoring tools: Utilize tools such as Lighthouse and WebPageTest to analyze the site's performance. These tools provide insights into various aspects of performance, including loading speed, rendering, and responsiveness. They also offer recommendations for improvements, making it easier to identify areas that need optimization. - Lighthouse: An open-source tool by Google that audits websites for performance, accessibility, progressive web apps, SEO, and more. Lighthouse can be run in Chrome DevTools, from the command line, or as a Node module. - WebPageTest: A free web performance tool that allows you to run tests from multiple locations and browsers, providing detailed information on load times, rendering, and other performance metrics. - Catchpoint (RUM): Real User Monitoring tools like Catchpoint help track real user interactions with the site, giving you an accurate picture of actual user experiences across various devices and network conditions. While synthetic tests are useful for simulating specific scenarios or devices, RUM data offers real-world insights that can inform optimization efforts. - Track Core Web Vitals (CWV) trends: Collaborate with the analytics team to request a report highlighting CWV improvements over a specific time range, or verify the trend directly in the Google Analytics CWV Dashboard, which allows for filtering by page type, date range, mobile versus desktop, and more. Verify trends in the Catchpoint RUM Web Vitals dashboard for the same time range. Although synthetic tests, like Lighthouse or Chrome extensions, can provide useful instant feedback, they are not sufficient to confirm impact at scale. Therefore, make sure to use a combination of these resources to gather comprehensive insights about the site's performance over time. - Set up SEO tracking and reporting: Implement tools like Google Search Console and Google Analytics to track and report on the site's SEO performance. These tools offer insights into organic traffic, search queries, click-through rates, and other valuable SEO-related data. - Google Search Console: A free service offered by Google that helps you monitor, maintain, and troubleshoot the site's presence in Google Search results. It provides information on indexing status, search queries, and any issues that might be affecting the site's visibility. - Google Analytics: A comprehensive web analytics service that provides insights into website traffic, user behavior, and other performance metrics. With Google Analytics, you can track organic traffic, user engagement, and the effectiveness of the SEO efforts. Integrating Google Analytics with Google Search Console can provide more in-depth data on the site's SEO performance. --- Resources Web Performance 1. Google Web Fundamentals: Performance - https://developers.google.com/web/fundamentals/performance 2. Mozilla Developer Network: Performance - https://developer.mozilla.org/en-US/docs/Web/Performance 3. Web.dev: Fast load times - https://web.dev/fast/ 4. PageSpeed Insights - https://developers.google.com/speed/pagespeed/insights/ 5. High-Performance Browser Networking - https://hpbn.co/ SEO 1. Google Search Central: SEO Starter Guide - https://developers.google.com/search/docs/beginner/seo-starter-guide 2. Moz: Beginner's Guide to SEO - https://moz.com/beginners-guide-to-seo 3. Yoast SEO: The beginner's guide to SEO - https://yoast.com/complete-beginner-guide-to-seo/ 4. Backlinko: SEO This Year - https://backlinko.com/seo-this-year 5. Ahrefs: SEO Basics - https://ahrefs.com/blog/seo-basics/ General Resources 1. Web.dev: Measure and Optimize - https://web.dev/measure/ 2. Google Lighthouse - https://developers.google.com/web/tools/lighthouse 3. Google Search Console - https://search.google.com/search-console/about 4. Google Analytics - https://analytics.google.com/ 5. W3C Web Performance Working Group - https://www.w3.org/webperf/",
    "url": "/resources/guides/performance-and-seo",
    "path": "resources/guides/performance-and-seo.mdx"
  },
  {
    "title": "React Guide",
    "description": "We're going to walk through how to build a feature for the website with our React UI Kit.",
    "kicker": "Guides",
    "content": "--- We're going to build a \"save to reading list\" feature for the website. Pre-requisites We will need a few things to get started. First, we need to install the React UI Kit. This guide assumes you have a Next.js project set up. Let's configure the project to support Server Side Rendering. This is a requirement for the React UI Kit in Next.js. We are following Stitches guide on how to do this. Seen here.. You need to call ‘getCssText()’ in the document head to prevent FOUC during SSR. Create a new component file in your \"components\" directory with the following code: Let's walk through each line of code. We will be using the styled function to create a styled component. We will also be using the theme object to get the current theme. We will also be using the Icon component to create an accessible icon. The styled function takes a component and returns a styled component. It uses Stitches under the hood. The theme object lets us use our Theme tokens with type safety. We can also use the cool \"interpolation\" syntax to get the current theme. Like so $primary will return the current primary color. The Icon component clones the SVG React element and adds accessibility attributes. We can use the label prop to set the aria-label attribute. We can also use the size prop to set the width and height attributes. We will use a new asset from our Assets Manager. Let's create a new button component with the following code. We will use the Icon asset and apply the fill prop to set the color. Further Reading Further reading: - https://ped.ro/resources/variant-driven-components - https://ped.ro/resources/why-i-build-design-systems-with-stitches-and-radix - https://stitches.dev/docs/tutorials - https://stitches.dev/resources/using-nextjs-with-stitches Further watching: - https://www.youtube.com/watch?v=Gw28VgyKGkw",
    "url": "/resources/guides/react-guide",
    "path": "resources/guides/react-guide.mdx"
  },
  {
    "title": "Why are we using Stitches for WPDS?",
    "description": "Learn about our choice of using Stitches for WPDS.",
    "kicker": "Guides",
    "content": "--- History Our journey to Stitches began last year in January with an open discussion on our community issues board. The discussion topic was \"Should we move to a new CSS Framework?\" Many commented on loving our flavor of Tachyons and how it lends itself to rapid development especially for visual storytelling. However some commented that we should try a CSS-in-JS solution for our components. --- Supporting Community The discussion continued with a few more comments and we decided to move forward with Stitches as our CSS-in-JS solution. We are still committed to supporting Tachyons for the community. We are going to add our Tokens (Theming!) to Tachyons. It's on our roadmap! Although what we realized during that discussion, we want to explore supporting other CSS frameworks for our commmunity like Tailwind, Styled Components, Emotion, etc by leveraging our Tokens. --- Non-negotiables The open discussion helped us form our non-negotiables for our CSS solution for WPDS. - [x] Download only used CSS to the browser - [x] Server side rendering - [x] Developer experience, fully typed APIs - [x] Built in API for components/variants - [x] Built in API for theming - [x] Using CSS Properties for theming, extensiblity and customization --- Stitches - Ahead of the Curve Stitches checked all of those boxes! --- Further Reading - https://stitches.dev/docs/introduction - https://stitches.dev/blog/introducing-stitches - https://ped.ro/writing/why-i-build-design-systems-with-stitches-and-radix - https://ped.ro/writing/variant-driven-components - Stitches demo with Lee Robinson",
    "url": "/resources/guides/stitches",
    "path": "resources/guides/stitches.mdx"
  },
  {
    "title": "Migrating from Tachyons to Stitches",
    "description": "We've written a dedicated blog post about the differences between Tachyons and Stitches.",
    "kicker": "Guides",
    "content": "--- We will review what WaPo Tachyons is capable of and how it compares with Stitches. We will also review how to write a feature using one or the other to better understand the gaps in Tachyons and how Stitches can fit into them. --- Tachyons WaPo Tachyons is a CSS framework for rapid development using small atomic CSS classes. It was an answer to the size limit imposed by AMP. With that in mind, the team wrote classes for what was needed for the work. This methodology led to eventual gaps in the framework that we will discuss in the next section. --- Stitches > \"CSS-in-JS with near-zero runtime, SSR, multi-variant support, and a best-in-class developer experience.\" From (Stitches.dev) It is fully typed using CSSType so you can write any CSS you need. There is no limitation by design. --- Writing CSS with Ui Kit There are three ways to write CSS with Ui Kit using the Stitches API. Styled A function to create a component including its styles and variants. It receives: element or component: a HTML element (div) or a React Component (Component), styles: as many styleObject as you need CSS A function to generate class names from a style object. It receives as many styleObject as you need. Box A component that uses the styled function to compose itself. It has all of the props from styled. It's a quick way to prototype a component using the css prop.",
    "url": "/resources/guides/tachyons-stitches",
    "path": "resources/guides/tachyons-stitches.mdx"
  },
  {
    "title": "Using Stitches to style your projects",
    "description": "Via the WPDS UI Kit",
    "kicker": "Guides",
    "content": "Stitches The Washington Post Design System utilizes the css-in-js library, Stitches, to optimize app performance and dev experience. For more context about why we use Stitches, check out this post by the WPDS team. --- Stitches functions Stitches functions make creating and styling components easy. Below, we’ll dive into the functions most useful to a user of our UI Kit, but check out Stitches’ other functions if you’re curious. Styled The styled function is used to simply create React components with styles. The arguments to the function are: 1. either an HTML element or a react component 2. styles Component variants may also be specified. For example: CSS The css function can be used to create reusable styles through the application of a class name or used inline to style individual elements. Here’s an example of inline use, utilizing the already defined FancyButton from before: And below demonstrates the application of css through the classname property: \\\\note: style property names use camel case in these functions (example: z-index becomes zIndex) Keyframes Another function available in Stitches is the keyframes function. Using the keyframe animation technique, Stitches allows the creation of global CSS keyframe rules, which lets transitions be easily reused across code. Below is an example of a simple fading-out animation: --- Theme object and tokens The theme object contains useful token data that can be applied when styling an element. WPDS specifies its own tokens for many attributes, which can be explored throughout the foundations section of our documentation. Tokens can be accessed in code by using the theme object, which is is preferred over using the $ reference symbol because it provides additional checks. For more information about using our theme tokens, check out this tutorial.\\ The const WPDS is pre-defined in the UI Kit's stitches.config.ts file. Breakpoints Stitches is also capable of defining breakpoints, which are reusable media queries useful for responsive styling. The WPDS UI Kit supports a variety of size breakpoints and custom themes, which can be explored in the kit's stitches.config.ts file. The button in the example below would be uniquely styled when the viewport is smaller than 768px, or sm. Note: the \"@dark\" and \"@light\" media queries are responsive only to OS preferences, so styles specified with these will not affect elements based on the theme toggled in the application. To style an element based on local theme, consider stying based on the parent html element using the syntax: [\". &\"]. For example: Utils Utils allow the creation of custom shortcuts to write certain styling properties. For example, the WPDS ui kit has defined utils px and py, which affect horizontal and vertical padding, respectively. px could then be used in place of padding-left and padding-right when styling elements. Check out the other utils WPDS supports defined in the config file. --- Global styles Another feature of the UI Kit that provides greater consistency is globalStyles. In the globalStyles definition, default styles for certain properties are specified by using Stitches’ globalCSS function. A darkModeGlobalStyles modification is also specified, which alters default color styles in dark mode. Dark theme The WPDS UI Kit currently supports a light and a dark theme. Using the Stitches function createTheme, tokens specified in the theme object can be overwritten to create custom themes. In the case of our UI Kit, the dark theme is employed when the breakpoint dark is toggled. --- Contributing If your team would benefit from an additional util, breakpoint, or something else, please reach out to the WPDS team!",
    "url": "/resources/guides/themes",
    "path": "resources/guides/themes.mdx"
  },
  {
    "title": "User Education Guide",
    "description": "This guide is an introduction to our user education framework. By the end of this document, you will have learned the following - Evaluate user education needs based on detail, engagement, and communication type. Apply best practices to select the right components and design effective user education experiences.",
    "kicker": "Guides",
    "content": "--- The Framework Our framework is grounded in the principle of thoughtful disruption—balancing the need to inform users versus their primary goal for coming to the Washington Post: Reading and engaging with our content. - Consider these assumptions when using the user education framework: - Users only internalize a small part of user education. - Users are scanning, not reading. - Users are also likely to dismiss a message before reading. - Clarity begins on the feature level. User education is additive, but can't do all the work. - The best messaging experiences are valuable, only when needed, and not overlapping. Be mindful of the greater messaging ecosystem. Are there several messages at this moment? Will if feel spammy? Using the framework 1. Identify the Use Case - Assess the detail required - Assess the level engagement level - Determine what type of communication 2. Design and Implement - Select the appropriate component: Use our matrix of components to help determine the correct pattern of user education for your specific use case. - Ensure consistency in design and messaging with other experiences. - Test the implementation to ensure clarity and effectiveness. High Detail Low Detail Passive Engagement High Engagement High Detail & Passive Engagmenet Appropriate for information-dense content that doesn't demand immediate user action, but requires careful consideration (e.g., in-depth tooltips, instructional guides) High Detail & Active Engagement Best suited for content that requires active user interaction, and involves complex information (e.g., detailed onboarding flows, multi-step product tours). Low Detail & Passive Engagmenet Fits content that is simple and primarily informational without requiring much interaction (e.g., notifications, passive alerts). Low Detail & Active Engagmenet Ideal for interactive content that is easy to grasp, but still requires user participation (e.g., quick walkthroughs, feature discovery nudges). --- Assess the Level of Detail The level of detail is determined by several factors, primarily based on the complexity of the information, the user's experience level, and how critical the information is to avoid frustration. Consider the following: 1. Complexity of Information - High Detail: Necessary for complex information involving multiple steps or requiring thorough understanding (e.g., detailed instructions, complex workflows). - Low Detail: Suitable for straightforward or simple information, like quick reminders (e.g., single-step instructions, brief notifications). 2. User Experience Level - High Detail: Required for users new to the application or feature who need comprehensive guidance. - Low Detail: Appropriate for experienced users who only need brief reminders or notifications. 3. Criticality of Information - High Detail: Essential if missing the information could lead to significant issues, errors, or user frustration. - Low Detail: Adequate when the information is helpful but not critical to the user's success or safety. --- Assess the Level of Engagement When designing user education content, consider the level of engagement needed based on user interaction requirements, learning goals, and the urgency of the communication. Here's how to approach it: 1. User Interaction Requirement - Active Engagement: Required if the communication encourages users to perform actions, make decisions, or interact with features (e.g., product tours, walkthroughs). - Passive Engagement: Suitable for informational content that doesn't require user action beyond reading or acknowledging (e.g., tooltips, system messages). 2. Learning and Adoption Goals - Active Engagement: Necessary when the objective is for users to learn and adopt new features or changes through hands-on interaction. - Passive Engagement: Appropriate if the goal is to inform users without requiring immediate engagement with the content. 3. Frequency and Urgency - Active Engagement: Ideal for messages that are urgent or infrequent and need immediate attention (e.g., critical alerts, onboarding). - Passive Engagement: Suitable for regular communications that serve as ongoing support or reminders. --- Determine the type of communication It's crucial to identify the type of communication you need because it will guide decisions around language, messaging, UX, and more. We've categorized our user education into the following three buckets: - First Time User Experience - Support - Growth --- First-Time User Experience (FTUX) FTUX refers to a user's initial interaction with a product or feature. The experience should provide a smooth, engaging and informative introduction to the benefits and features. User education is often useful to show the value prop of our ever-evolving product offerings. Common FTUX experiences include: - Onboarding - Product Tours - New Feature Announcements - Feature Walkthroughs Considerations UX writing & content design - To create the most impactful experience, keep it as simple as possible, or consider if it's needed at all. If the goal is to teach a feature or interaction, make sure you're not leaning on the user education to fix unclear design. - Many people close tutorials or similar without using them. The lengthier the tutorial, the more drop-off. - If your user education has multiple steps, place them in order of importance to goals. - Consider visuals or animation to improve comprehension and engagement. --- Support Support provides users with contextual information and guidance, making it easier for them to understand and effectively use the product's features. Common support experiences include: - Added context (information tooltips) - System communication (e.g. server timeout and errors, form errors, successful interactions) - Account messaging (e.g. status of payment, changes to policies, and terms) Considerations UX writing & content design - When providing system-level information (error, confirmation, info messages, etc.), be clear, concise and helpful. - If it's an error, tell users what happened, why it happened, how to fix it and the next best option. - Use information tooltips to add non-critical context that helps users or builds trust. For example, “Why is this AI feature here?” Semantic Color - Use our semantic colors for error, success, signal, and warning messages. These colors reinforce visual cues and help users quickly understand the context of the communication. --- Growth Growth helps to expand a product's user base by encouraging user engagement, sharing, and retention through targeted messages and incentives. Common growth experiences include: - Upsell Visuals & Interactions - Account/Subscription Upgrades - Feature Adoption Campaigns Considerations UX writing & content design - User education can be useful to show our ever-evolving offering of features. Be thoughtful if the feature is actually cool and new in the user's mind. Consider if the user education will feel helpful or spammy. - Make value proposition very clear. - Understand this is an exchange. In exchange for my time, privacy or money, I will receive \\\\\\. - Keep it short. - Keep it simple. In general, only ask the user to make one choice at a time. - Have the button/CTA be the appropriate level of commitment for the step. For example, “See subscription options” might come before “Continue to payment.” Example: See Google hotel booking case study - The text underneath a button is called “trigger text”. It's often used to help someone make a decision, for example “Cancel anytime.” Subscription Color - Use our designated subscription color whenever the communication specifically addresses subscription-related topics. This ensures visual consistency and reinforces the importance of subscription messaging. --- Selecting the Appropriate Component We've aligned key components with their inherent interaction patterns within our framework for thoughtful disruption in user education. Each component offers different levels of support for handling complex details. Be sure to consult the component documentation for specific best practices.",
    "url": "/resources/guides/user-education",
    "path": "resources/guides/user-education.mdx"
  },
  {
    "title": "Zeplin Guide",
    "description": "Zeplin is our tool of choice when it comes to hand-off. It offers a layer of connection to code and design not yet realized by other tools.",
    "kicker": "Guides",
    "content": "--- Getting started Requesting access If you are a Washington Post employee, please submit a SAR to access our Zeplin Product & Design workspace. If you are not a post-employee and want to use Zeplin in your suite, please reference our Figma file to upload and create your style guide. Creating a Zeplin project Connecting WPDS Styleguide Connected Components By linking the style guide you unlock our connected compoents. Selecting a component connected to code in Zeplin will reveal a code snippet and the props chosen for the component variant. This happens when you use our Figma Ui Kit components! Properties We do our best to ensure that our Figma API that translates to Zeplin properties matches as close to 1:1 of the actual coded component. However, you might find some properties like states that are not in the coded component; this is due to the nature of Figma. In those instances, you can ignore it unless otherwise documented. --- Extension Getting WPDS Extension Zeplin supports a good amount of tokens; there are some limitations in how some tokens are managed or not managed at all. Right not the current tokens managed by Zeplin is only color. We chose not to manage typestyles; instead, we highlight individual tokens font size, font, line height using our extension. We also manage tokens like border radius and shadows using our extension. Installing the extension Select the project in Zeplin you would like to add the extension to and then select extension > explore extensions > add WPDS Tokens. Typography tokens To reveal the typography tokens, select a text layer to have the extension show the properties of that text. Border radius and shadows To reveal the border radius or shadow, select a layer with a border radius or shadow, and the extension will show the corresponding tokens. Token syntax Note that all tokens will display in stitches token string format by adding a $. Stitches is our default styling framework for our system, but if you need to refer to the token, drop the $.",
    "url": "/resources/guides/zeplin-guide",
    "path": "resources/guides/zeplin-guide.mdx"
  },
  {
    "title": "Convert Tachyons to Stitches",
    "description": "A simple online tool to convert Tachyons classes to Stitches style objects.",
    "kicker": "Tools",
    "content": "This utility converts Tachyon classes to a style object that can be used by Stitches styled or css functions.",
    "url": "/resources/tools/tachyons-to-stitches",
    "path": "resources/tools/tachyons-to-stitches.mdx"
  },
  {
    "title": "Tailwind WPDS Theme",
    "description": "A Tailwind CSS theme using WPDS tokens.",
    "kicker": "Tools",
    "content": "Installation Add tailwind to your project by following their specific framework guides. Install the theme package from npm Add the theme to your tailwind.config.js. It's strongly recommended to override the default theme to prevent the accidental use of Tailwind's color variables and scale values. Tailwind's preflight base styles should be disabled. Ensure that the WPDS fonts and css variables are available on the page if they are not already installed. --- Token Naming The following tokens are used from the WPDS. - color - size - fonts - fontSize - fontWeights - lineHeight - radii - shadow - z-index The wpds token names and scales for each value replace the Tailwind name and scale. For example when setting lineHeight becomes --- Example {Headline} {Subheadline} Body text Meta text",
    "url": "/resources/tools/tailwind-theme",
    "path": "resources/tools/tailwind-theme.mdx"
  },
  {
    "title": "How to use the WPDS Carousel component in your Figma design",
    "description": "WPDS Carousel is robust enough to support a variety of use-cases. In this guide, we’ll show you how to implement the component in your designs and get the most out of its many features. You’ll also learn how to configure the Carousel to enable custom elements such as your own button controls or custom content.",
    "kicker": "Tutorials",
    "content": "Getting Started What is a Carousel? In simple terms, a carousel is a type of container that displays a sequence of items, which can be interacted with by clicking or swiping—much like a deck of cards or an old-fashioned slide projector – ie a “carousel”. Carousels are an extremely common UI pattern and it’s likely you’ve come across various instances of them across the web. Many websites make use of carousels— from news publishers and streaming platforms to e-commerce sites, recipe blogs and cloud-based tools. When Should I Use a Carousel? Carousels are often a great choice for presenting individual cards or a collection of content in a format that is familiar to many users. Because they are interactive, carousels encourage discovery by permitting users to toggle the visibility of items in the sequence. The ability to navigate between previous and next items builds anticipation and gives users a sense of control. In addition, using a carousel in your design can be an economical use of visual ‘real-estate’, as carousels typically don’t occupy much vertical space, but may display a continuous row of items, such as a series of articles. In contrast, a grid or photo gallery might occupy multiple rows or the whole page. This makes carousels convenient for use in scenarios in which free space is limited, such as on mobile screens. When Should I Avoid Using a Carousel? In the browser, carousels can present challenges for users who rely on screen-readers or other assistive technology. Because carousels are inherently meant to hide or show individual items based on user-feedback, there’s a chance some content will be obscured from view, either visually or programmatically. This might result in important or essential information becoming hard to read or otherwise inaccessible to some screen-readers and users with visual impairments. The WPDS Carousel is designed with modern accessibility best-practices in mind. The component supports reduced-motion and keyboard-enabled navigation and has been built to interoperate with screen reading technology. However, performance and functionality in these areas might be impacted when using rich media in your carousel (such as embedded audio or video). Ultimately it’s important to work closely with your engineering team to ensure that implementation of the carousel meets functional UX requirements and accessibility standards for your use-case. Now that we’ve had a chance to understand Carousels as a UI pattern, let’s learn how to use the WPDS Carousel component in your Figma designs. But First – Component Docs! Before delving further into this guide, we highly recommend taking the time to read our component documentation for WPDS Carousel, if you haven’t already done so. As a starting point, the Carousel component doc provides plenty of useful information regarding the component’s key technical features and functionality, including considerations for web-accessibility. --- Configuring the Carousel Figma’s Component Properties WPDS Carousel takes advantage of component properties, a native feature in Figma. With component properties or ‘props’, we can build components that are flexible enough to configure according to your needs, while preserving reusability. A further benefit of this approach is that we can establish a direct relationship between the design component that lives in Figma and the coded component that lives in the browser, because they share the same properties. (Learn more about “connected components” in our Zeplin resource guide). Adding an Instance of the Carousel to your Figma Design Like all of the components in our UI Kit Library, the Carousel component can be placed into your Figma file by dragging an instance of it from the “Assets” panel into your document. Renaming the Carousel In the design panel, you will see the ⬦Carousel component instance, along with its configurable properties — including 🄵 title. By default, the text displayed at the top of the component is “Carousel title”. To alter this text, simply click the input field next to 🄵 title to edit its value and press enter when done. If you’d prefer not to display a title for your Carousel, you may toggle the switch next to 🄵 show title?. (Toggling this setting hides the text layer in your ⬦Carousel instance.) Positioning the controls ⬦Carousel ships with several options for placement of controls (e.g. prev / next buttons) and pagination — including the option to hide controls entirely. To change where controls are placed, click the dropdown menu next to 🄵 controls and select the option that’s most suitable to your design. The available options are meant to serve a variety of use-cases and visual preferences while maintaining functionality and predictability for our website visitors. (For more guidance on custom controls, see section 4: Advanced Customization) Resizing the Carousel To adjust the width, simply drag the right or left edge of the ⬦Carousel frame. You may choose to make your instance of the component narrower or wider, depending on the space available in your design. Increasing the width will reveal additional content items nested within the component. (For more guidance on this, see section 3: Working with Content). Dynamic height with Auto layout Using Figma’s Auto Layout feature, we can set the vertical dimension of ⬦Carousel to “hug” its contents. This means the height of the carousel is determined by the content nested within it, and will adapt its height accordingly. --- Working with Carousel Content Selecting a content type As previously discussed – Carousels can contain many kinds of content. The WPDS Carousel component ships with a number of content types to pick from when populating your instance (more on “content organisms” below). To choose from the available options, click the dropdown menu next to 🄵 content type and make a selection. Your selection will be applied to all nested “Slot” elements within your ⬦Carousel instance. Content Organisms The options found under 🄵 content type represent specific content patterns commonly found across washingtonpost.com. These “organisms” are in fact, unique sub-components that are maintained in their own dedicated Figma library (ie Pattern Kit), which lives outside of the core WPDS UI kit. Editing Content via Component Properties Each content type features its own, unique component properties. Once you’ve selected a content type, its properties can be modified directly in the Design panel. Any edits you make will be applied to your instance of ⬦Carousel. --- Advanced Customization Understanding Component Nesting in Figma One of the most powerful aspects of designing with components in Figma is the ability to override nested components. (Read more about this technique in our guide, “How to Use Slots”). Combined with Figma’s “swap instance” feature,⬦Carousel offers several methods to customize the appearance of key UI elements such as content and controls. Out of the box, the component ships with placeholder elements (eg, “slots”) that can be replaced with your own, unique designs— all without ever detaching the component from our component library. To begin customizing your instance of ⬦Carousel, click the dropdown menu next to 🄵 controls and select “Custom”. Creating Your Own Button Controls In order to swap the placeholder element with your own custom button — you’ll first have to create a custom button! Your button will then be used as a replacement for the placeholder (shown below). Once you’ve designed the buttons you intend to use in your ⬦Carousel instance, create a component of each button — one for “previous” one for “next”. Frame your selection and give it a name (such as “Custom Buttons”, shown below). Make note of where this frame lives in your Figma file in case you want to make adjustments later. Now, in the instance panel, click the dropdown menu next to 🄵 prev button or 🄵 next button. In the search field, type the name of the frame where your custom buttons are located. Choose the “previous” or “next” button that corresponds to the button you are swapping. Your selection will be applied to the ⬦Carousel. Repeat the process for the other button and your buttons are now customized. Using Your Own Content As we saw earlier, Carousel ships with several common patterns to choose from for 🄵 content type. However, what if none of these options are well-suited for your design or use-case? Employing the same approach described above, we can replace the default “content” slots in the Carousel, with our own custom content by swapping instances. Just as before, you’ll design your own content card in Figma, create a component from it, and place it into a frame. Name the frame something easy to remember such as “Custom Content” (shown below). Now let’s look at the instance panel once again and click the dropdown next to 🄵 content type. This time, rather than selecting from the default options under “Preferred” – we’ll choose “Local components”, find “Custom Content” and select the content card we designed earlier. Your instance of ⬦Carousel is now populated with your own custom content!",
    "url": "/resources/tutorials/carousel",
    "path": "resources/tutorials/carousel.mdx"
  },
  {
    "title": "How to do a 5-minute accessibility audit",
    "description": "In this tutorial, you will learn just how quickly you can audit content for color, sizing, keyboard and screen reader accessibility.",
    "kicker": "Tutorials",
    "content": "Video tutorial",
    "url": "/resources/tutorials/five-minute-accessibility-audit",
    "path": "resources/tutorials/five-minute-accessibility-audit.mdx"
  },
  {
    "title": "How to use theme tokens",
    "description": "In this tutorial, we will learn just how our theme tokens work and interact with our greater color palette. You will understand why you would use a theme token over just using the same color token. Theme tokens are powerful and will help define how we abstract intention from color in the future as we grow.",
    "kicker": "Tutorials",
    "content": "Video tutorial",
    "url": "/resources/tutorials/how-to-use-our-theme",
    "path": "resources/tutorials/how-to-use-our-theme.mdx"
  },
  {
    "title": "How to use slots",
    "description": "Slots is a new concept that you will find in our figma ui-kit. It empowers you to nest and build out paterns with our components without detaching. Follow along on this tutorial where you will learn all about slots.",
    "kicker": "Tutorials",
    "content": "Video tutorial --- Written steps Before starting Slots are not an actual componet you will find in our coded design system but rather a figma only component that's only purpose is to be swapped out for a pattern, or local component you are designing. When you see a slot either by how its labeled or its name in the layer of a component you can be sure it is a signal for you to replace it with your own local component. When to use Slots are used to avoid having to detaching a component to access nesting content inside of it. For example a tooltip or accordion can hold a lot of different type of content. Rather than the figma component accounting for ever possible variation it is better to just have slot. This then allows for infinite possiblities without having to detach at all. The steps 1. First be sure that the component either has a slot by name or you have asked if it is okay to replace. 2. Create your local pattern either using our library of components or just our foundaitons like our typography tokens. This could be anything a headline with a blurb or a image with a headline. 3. Be sure to frame the entire pattern and name it appropriately. 4. Add an auto layout to the frame and convert it to a local component. 5. Select the slot in the component and replace it with the local component. 6. Done! Common pitfalls Sometimes things do not look right when you replace the slot if this is the case check the following: - Does you component have a auto-layout and is it position correctly. - Check the nested version of your component and be sure the it is sized appropriately either fill-container or hug-contents.",
    "url": "/resources/tutorials/how-to-use-slots",
    "path": "resources/tutorials/how-to-use-slots.mdx"
  },
  {
    "title": "WPDS v1 - Design Workshop",
    "description": "Watch Brian Alfaro lead a design workshop for our rollout of the new WPDS.",
    "kicker": "Workshops",
    "content": "Watch Brian Alfaro lead a design workshop for our v1 rollout of the new WPDS. (Recorded March 16th, 2022). Chapters: 0:00 - Agenda & intro 3:16 - Our new tokens 5:49 - Color tokens 7:26 - Numeric tokens 12:47 - Context (light and dark) 17:24 - Color intention (theming) 21:26 - Figma plugin (Token tools) 25:09 - Component API 27:47 - Zeplin code/style guide 30:30 - Zeplin extension 31:59 - Navigation our doc site",
    "url": "/resources/workshops/design_3-16-22",
    "path": "resources/workshops/design_3-16-22.mdx"
  },
  {
    "title": "WPDS v1 - Design Workshop 2",
    "description": "Continuing our deep dive in our new design system.",
    "kicker": "Workshops",
    "content": "{\" \"} What we learned Hey there! We just had our design workshop number 2 and it was great joy to share with you all of the new things we have been working on. Here is what you missed: - Answering some frequently asked questions since we released. - Learning about our new component api. - Deep diving on our button component - Our new css framework - Slots (new figma pattern for components) --- The workshop video",
    "url": "/resources/workshops/design_4-6-22",
    "path": "resources/workshops/design_4-6-22.mdx"
  },
  {
    "title": "WPDS v1 - Developer Workshop",
    "description": "Watch Arturo Silva lead a developer workshop for our v1 rollout of the new WPDS.",
    "kicker": "Workshops",
    "content": "Watch Arturo Silva lead a developer workshop for our v1 rollout of the new WPDS. (Recorded March 17th, 2022).",
    "url": "/resources/workshops/developer_3-17-22",
    "path": "resources/workshops/developer_3-17-22.mdx"
  },
  {
    "title": "WPDS v1 - Developer Workshop 2",
    "description": "Watch Arturo Silva lead our second developer workshop for our v1 rollout of the new WPDS. Same topics as the first one, but with a different approach.",
    "kicker": "Workshops",
    "content": "What's happening Watch Arturo Silva lead our second developer workshop for our v1 rollout of the new WPDS. Same topics as the first one, but with a different approach. (Recorded April 7th, 2022). Topics discussed - Box component - Theme package's OOTB Stitches functions - css - styled - theme - utils - The differences between SASS/SCSS and CSS-in-JS - How to use the css function in Svelte, Vue.js, and more - and much more!",
    "url": "/resources/workshops/developer_4-7-22",
    "path": "resources/workshops/developer_4-7-22.mdx"
  },
  {
    "title": "Component status",
    "description": "The life cycle of our component on our doc site after designs have been finalized has 4 phases 3 of which are indicated by a visible status. This support guide will define each status and how it relates to the usage of the component.",
    "kicker": "Support",
    "content": "Coming soon This status indicates that the component designs have been finalized and the component is currently under development. This status only appears on the sidebar of our navigation. --- Alpha This status indicates that the component is available via code, but BREAKING CHANGES can be expected and the documentation is still in refinement. That would mean that guidance can change, code examples might change and content can be corrected, rephrased and/or removed. This status will appear as a banner on the component documentation page. --- Beta This status indicates that the component design + documentation is finalized and it is available via code. Additive changes may still occur but no breaking changes will occur unless a security fix is needed. This status will appear as a banner on the component documentation page. --- Stable If no status is shown on the component it indicates the component has reached a stable state. Any changes that occur to the component will be communicated far ahead of their implementation.",
    "url": "/support/component-status",
    "path": "support/component-status.mdx"
  },
  {
    "title": "Get help",
    "description": "How to contact us!",
    "kicker": "Support",
    "content": "Support channels - Slack channel (#wpds) - GitHub issues --- Change/request So you have an idea? Great, we love to hear it! Our design system aims to listen to all of the needs and ideas of our community of adopters. The team will work together with you to determine the result of the idea submitted. If you are interested in contributing a component, read more about our process. Using our slack workflow 1. Head over to our #WPDS slack channel where you will kick off your idea! 2. In the channel, type /change or /request, and you will see the option to submit an Idea to DS 3. Now, a form will open up with some questions. Please be as detailed as possible to the best of your knowledge. 4. Hooray! You submitted an idea. The WPDS team will be notified, and now it is open for public discussion across many teams that use WPDS. The team will generate a ticket and prepare it for the next steps of our workflow. Not at the Washington Post? Contact us at wpds@washingtonpost.com",
    "url": "/support/get-help",
    "path": "support/get-help.mdx"
  },
  {
    "title": "v0 Design System",
    "description": "Information about WPDS legacy v0",
    "kicker": "Support",
    "content": "WPDS v0 is no longer under active development. The Washington Post Design system has evolved from its initial form — known as &ldquo;version 0&rdquo; — developed from 2018&mdash;2019. Version 0 has been deprecated to legacy status and is no longer under active development. For additional information visit the WPDS v0 docs site.",
    "url": "/support/legacy-v0",
    "path": "support/legacy-v0.mdx"
  },
  {
    "title": "Release cycles",
    "description": "How we release new versions",
    "kicker": "Support",
    "content": "Cycles - Bug fixes are released in the form of a patch release. This is the most frequent release type. A patch release is a release that fixes a bug in a token or a component (design or in code). We ship patches on a weekly basis. For example, \"1.0.1\" is the first patch release. - Feature releases are released in the form of a minor release. This is the second most frequent release type. A minor release is a release that adds to our tokens or components (brand new components, tokens too) (design or in code). We ship minor releases on a monthly basis. For example, \"1.1.0\" is the first minor release. - Major releases are releases that add new features to the platform. We ship major releases on a quarterly basis. For example, \"2.0.0\" is the first major release. Components are released batches but only components with full documentation are fully supported. Any other components that are released in the batch without docs will be consider in Alpha status and will be indicated on the doc site as Alpha status. Those will not be fully supported until official release.",
    "url": "/support/release-cycles",
    "path": "support/release-cycles.mdx"
  },
  {
    "title": "Supported platforms",
    "description": "More about the platforms the WPDS UI Kit supports",
    "kicker": "Support",
    "content": "Note: We reevalute our supported platforms at the end of our fiscal year. Browsers We support the following browsers (up to the latest 2 stable versions): - Google Chrome - Apple Safari - Mozilla Firefox - Microsoft Edge See Browserslist config link Server environments We support Node.js 18 and 16 React - 18 React frameworks We are open to adding more React frameworks here. Contact us through our support channels. - Next.js 14+ Typescript Ui Kit requires a minimum version of TypeScript 3.8. This aims to match the policy of DefinitelyTyped, with the support of the versions of TypeScript that are less than two years old.",
    "url": "/support/supported-platforms",
    "path": "support/supported-platforms.mdx"
  },
  {
    "title": "The Source of Truth",
    "description": "Curious about the RGBA and Hex values for our wonderful color tokens? Ponder no longer!",
    "kicker": "",
    "content": "Table of contents - Light tokens - Dark tokens - Static tokens --- Light tokens --- Dark tokens --- Static tokens Static color tokens hold their value regardless of the current context. To use a static token apply a -static suffix to the color token.",
    "url": "/zzz/color-codes",
    "path": "zzz/color-codes.mdx"
  }
]